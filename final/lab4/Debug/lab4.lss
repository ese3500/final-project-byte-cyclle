
lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000288  00800100  00001f38  00001fcc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f38  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000024  00800388  00800388  00002254  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002254  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000022b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d8  00000000  00000000  000022f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002e30  00000000  00000000  000024c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f54  00000000  00000000  000052f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000147e  00000000  00000000  0000624c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000067c  00000000  00000000  000076cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000903  00000000  00000000  00007d48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002070  00000000  00000000  0000864b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b0  00000000  00000000  0000a6bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
       4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
       8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
       c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      10:	0c 94 5c 06 	jmp	0xcb8	; 0xcb8 <__vector_4>
      14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
      b4:	11 24       	eor	r1, r1
      b6:	1f be       	out	0x3f, r1	; 63
      b8:	cf ef       	ldi	r28, 0xFF	; 255
      ba:	d8 e0       	ldi	r29, 0x08	; 8
      bc:	de bf       	out	0x3e, r29	; 62
      be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
      c0:	13 e0       	ldi	r17, 0x03	; 3
      c2:	a0 e0       	ldi	r26, 0x00	; 0
      c4:	b1 e0       	ldi	r27, 0x01	; 1
      c6:	e8 e3       	ldi	r30, 0x38	; 56
      c8:	ff e1       	ldi	r31, 0x1F	; 31
      ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
      cc:	05 90       	lpm	r0, Z+
      ce:	0d 92       	st	X+, r0
      d0:	a8 38       	cpi	r26, 0x88	; 136
      d2:	b1 07       	cpc	r27, r17
      d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
      d6:	23 e0       	ldi	r18, 0x03	; 3
      d8:	a8 e8       	ldi	r26, 0x88	; 136
      da:	b3 e0       	ldi	r27, 0x03	; 3
      dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
      de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
      e0:	ac 3a       	cpi	r26, 0xAC	; 172
      e2:	b2 07       	cpc	r27, r18
      e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
      e6:	0e 94 dd 06 	call	0xdba	; 0xdba <main>
      ea:	0c 94 9a 0f 	jmp	0x1f34	; 0x1f34 <_exit>

000000ee <__bad_interrupt>:
      ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <LCD_drawPixel>:



void initCharUpdate(CharUpdate *update) {
	// Use memset to set all bytes in the CharUpdate structure to 0.
	memset(update, 0, sizeof(CharUpdate));
      f2:	cf 93       	push	r28
      f4:	df 93       	push	r29
      f6:	ea 01       	movw	r28, r20
      f8:	26 2f       	mov	r18, r22
      fa:	48 2f       	mov	r20, r24
      fc:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <LCD_setAddr>
     100:	ce 01       	movw	r24, r28
     102:	0e 94 04 09 	call	0x1208	; 0x1208 <SPI_ControllerTx_16bit>
     106:	df 91       	pop	r29
     108:	cf 91       	pop	r28
     10a:	08 95       	ret

0000010c <LCD_drawBigChar>:
     10c:	2f 92       	push	r2
     10e:	3f 92       	push	r3
     110:	4f 92       	push	r4
     112:	5f 92       	push	r5
     114:	6f 92       	push	r6
     116:	7f 92       	push	r7
     118:	8f 92       	push	r8
     11a:	9f 92       	push	r9
     11c:	af 92       	push	r10
     11e:	bf 92       	push	r11
     120:	cf 92       	push	r12
     122:	df 92       	push	r13
     124:	ef 92       	push	r14
     126:	ff 92       	push	r15
     128:	0f 93       	push	r16
     12a:	1f 93       	push	r17
     12c:	cf 93       	push	r28
     12e:	df 93       	push	r29
     130:	00 d0       	rcall	.+0      	; 0x132 <LCD_drawBigChar+0x26>
     132:	00 d0       	rcall	.+0      	; 0x134 <LCD_drawBigChar+0x28>
     134:	cd b7       	in	r28, 0x3d	; 61
     136:	de b7       	in	r29, 0x3e	; 62
     138:	28 01       	movw	r4, r16
     13a:	fa 01       	movw	r30, r20
     13c:	b0 97       	sbiw	r30, 0x20	; 32
     13e:	fa 83       	std	Y+2, r31	; 0x02
     140:	e9 83       	std	Y+1, r30	; 0x01
     142:	e0 ea       	ldi	r30, 0xA0	; 160
     144:	f0 e0       	ldi	r31, 0x00	; 0
     146:	e8 1b       	sub	r30, r24
     148:	f1 09       	sbc	r31, r1
     14a:	ce 2c       	mov	r12, r14
     14c:	d1 2c       	mov	r13, r1
     14e:	a6 01       	movw	r20, r12
     150:	44 0f       	add	r20, r20
     152:	55 1f       	adc	r21, r21
     154:	44 0f       	add	r20, r20
     156:	55 1f       	adc	r21, r21
     158:	44 0f       	add	r20, r20
     15a:	55 1f       	adc	r21, r21
     15c:	4c 19       	sub	r20, r12
     15e:	5d 09       	sbc	r21, r13
     160:	4e 17       	cp	r20, r30
     162:	5f 07       	cpc	r21, r31
     164:	0c f0       	brlt	.+2      	; 0x168 <LCD_drawBigChar+0x5c>
     166:	85 c0       	rjmp	.+266    	; 0x272 <LCD_drawBigChar+0x166>
     168:	e0 e8       	ldi	r30, 0x80	; 128
     16a:	f0 e0       	ldi	r31, 0x00	; 0
     16c:	e6 1b       	sub	r30, r22
     16e:	f1 09       	sbc	r31, r1
     170:	4e 17       	cp	r20, r30
     172:	5f 07       	cpc	r21, r31
     174:	0c f4       	brge	.+2      	; 0x178 <LCD_drawBigChar+0x6c>
     176:	72 c0       	rjmp	.+228    	; 0x25c <LCD_drawBigChar+0x150>
     178:	7c c0       	rjmp	.+248    	; 0x272 <LCD_drawBigChar+0x166>
     17a:	e9 81       	ldd	r30, Y+1	; 0x01
     17c:	fa 81       	ldd	r31, Y+2	; 0x02
     17e:	ee 0f       	add	r30, r30
     180:	ff 1f       	adc	r31, r31
     182:	ee 0f       	add	r30, r30
     184:	ff 1f       	adc	r31, r31
     186:	89 81       	ldd	r24, Y+1	; 0x01
     188:	9a 81       	ldd	r25, Y+2	; 0x02
     18a:	e8 0f       	add	r30, r24
     18c:	f9 1f       	adc	r31, r25
     18e:	e7 56       	subi	r30, 0x67	; 103
     190:	fe 4f       	sbci	r31, 0xFE	; 254
     192:	ea 0d       	add	r30, r10
     194:	fb 1d       	adc	r31, r11
     196:	60 80       	ld	r6, Z
     198:	e1 2c       	mov	r14, r1
     19a:	f1 2c       	mov	r15, r1
     19c:	56 c0       	rjmp	.+172    	; 0x24a <LCD_drawBigChar+0x13e>
     19e:	86 2d       	mov	r24, r6
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	0e 2c       	mov	r0, r14
     1a4:	02 c0       	rjmp	.+4      	; 0x1aa <LCD_drawBigChar+0x9e>
     1a6:	95 95       	asr	r25
     1a8:	87 95       	ror	r24
     1aa:	0a 94       	dec	r0
     1ac:	e2 f7       	brpl	.-8      	; 0x1a6 <LCD_drawBigChar+0x9a>
     1ae:	80 fd       	sbrc	r24, 0
     1b0:	22 c0       	rjmp	.+68     	; 0x1f6 <LCD_drawBigChar+0xea>
     1b2:	81 2c       	mov	r8, r1
     1b4:	91 2c       	mov	r9, r1
     1b6:	43 c0       	rjmp	.+134    	; 0x23e <LCD_drawBigChar+0x132>
     1b8:	67 2d       	mov	r22, r7
     1ba:	1e 9d       	mul	r17, r14
     1bc:	60 0d       	add	r22, r0
     1be:	11 24       	eor	r1, r1
     1c0:	9b 81       	ldd	r25, Y+3	; 0x03
     1c2:	69 0f       	add	r22, r25
     1c4:	a1 01       	movw	r20, r2
     1c6:	80 2f       	mov	r24, r16
     1c8:	1a 9d       	mul	r17, r10
     1ca:	80 0d       	add	r24, r0
     1cc:	11 24       	eor	r1, r1
     1ce:	88 0d       	add	r24, r8
     1d0:	0e 94 79 00 	call	0xf2	; 0xf2 <LCD_drawPixel>
     1d4:	eb 81       	ldd	r30, Y+3	; 0x03
     1d6:	fc 81       	ldd	r31, Y+4	; 0x04
     1d8:	31 96       	adiw	r30, 0x01	; 1
     1da:	fc 83       	std	Y+4, r31	; 0x04
     1dc:	eb 83       	std	Y+3, r30	; 0x03
     1de:	02 c0       	rjmp	.+4      	; 0x1e4 <LCD_drawBigChar+0xd8>
     1e0:	1c 82       	std	Y+4, r1	; 0x04
     1e2:	1b 82       	std	Y+3, r1	; 0x03
     1e4:	8b 81       	ldd	r24, Y+3	; 0x03
     1e6:	9c 81       	ldd	r25, Y+4	; 0x04
     1e8:	8c 15       	cp	r24, r12
     1ea:	9d 05       	cpc	r25, r13
     1ec:	2c f3       	brlt	.-54     	; 0x1b8 <LCD_drawBigChar+0xac>
     1ee:	9f ef       	ldi	r25, 0xFF	; 255
     1f0:	89 1a       	sub	r8, r25
     1f2:	99 0a       	sbc	r9, r25
     1f4:	02 c0       	rjmp	.+4      	; 0x1fa <LCD_drawBigChar+0xee>
     1f6:	81 2c       	mov	r8, r1
     1f8:	91 2c       	mov	r9, r1
     1fa:	8c 14       	cp	r8, r12
     1fc:	9d 04       	cpc	r9, r13
     1fe:	84 f3       	brlt	.-32     	; 0x1e0 <LCD_drawBigChar+0xd4>
     200:	21 c0       	rjmp	.+66     	; 0x244 <LCD_drawBigChar+0x138>
     202:	67 2d       	mov	r22, r7
     204:	1e 9d       	mul	r17, r14
     206:	60 0d       	add	r22, r0
     208:	11 24       	eor	r1, r1
     20a:	eb 81       	ldd	r30, Y+3	; 0x03
     20c:	6e 0f       	add	r22, r30
     20e:	a2 01       	movw	r20, r4
     210:	80 2f       	mov	r24, r16
     212:	1a 9d       	mul	r17, r10
     214:	80 0d       	add	r24, r0
     216:	11 24       	eor	r1, r1
     218:	88 0d       	add	r24, r8
     21a:	0e 94 79 00 	call	0xf2	; 0xf2 <LCD_drawPixel>
     21e:	8b 81       	ldd	r24, Y+3	; 0x03
     220:	9c 81       	ldd	r25, Y+4	; 0x04
     222:	01 96       	adiw	r24, 0x01	; 1
     224:	9c 83       	std	Y+4, r25	; 0x04
     226:	8b 83       	std	Y+3, r24	; 0x03
     228:	02 c0       	rjmp	.+4      	; 0x22e <LCD_drawBigChar+0x122>
     22a:	1c 82       	std	Y+4, r1	; 0x04
     22c:	1b 82       	std	Y+3, r1	; 0x03
     22e:	eb 81       	ldd	r30, Y+3	; 0x03
     230:	fc 81       	ldd	r31, Y+4	; 0x04
     232:	ec 15       	cp	r30, r12
     234:	fd 05       	cpc	r31, r13
     236:	2c f3       	brlt	.-54     	; 0x202 <LCD_drawBigChar+0xf6>
     238:	ff ef       	ldi	r31, 0xFF	; 255
     23a:	8f 1a       	sub	r8, r31
     23c:	9f 0a       	sbc	r9, r31
     23e:	8c 14       	cp	r8, r12
     240:	9d 04       	cpc	r9, r13
     242:	9c f3       	brlt	.-26     	; 0x22a <LCD_drawBigChar+0x11e>
     244:	8f ef       	ldi	r24, 0xFF	; 255
     246:	e8 1a       	sub	r14, r24
     248:	f8 0a       	sbc	r15, r24
     24a:	98 e0       	ldi	r25, 0x08	; 8
     24c:	e9 16       	cp	r14, r25
     24e:	f1 04       	cpc	r15, r1
     250:	0c f4       	brge	.+2      	; 0x254 <LCD_drawBigChar+0x148>
     252:	a5 cf       	rjmp	.-182    	; 0x19e <LCD_drawBigChar+0x92>
     254:	ef ef       	ldi	r30, 0xFF	; 255
     256:	ae 1a       	sub	r10, r30
     258:	be 0a       	sbc	r11, r30
     25a:	06 c0       	rjmp	.+12     	; 0x268 <LCD_drawBigChar+0x15c>
     25c:	1e 2d       	mov	r17, r14
     25e:	19 01       	movw	r2, r18
     260:	76 2e       	mov	r7, r22
     262:	08 2f       	mov	r16, r24
     264:	a1 2c       	mov	r10, r1
     266:	b1 2c       	mov	r11, r1
     268:	f5 e0       	ldi	r31, 0x05	; 5
     26a:	af 16       	cp	r10, r31
     26c:	b1 04       	cpc	r11, r1
     26e:	0c f4       	brge	.+2      	; 0x272 <LCD_drawBigChar+0x166>
     270:	84 cf       	rjmp	.-248    	; 0x17a <LCD_drawBigChar+0x6e>
     272:	0f 90       	pop	r0
     274:	0f 90       	pop	r0
     276:	0f 90       	pop	r0
     278:	0f 90       	pop	r0
     27a:	df 91       	pop	r29
     27c:	cf 91       	pop	r28
     27e:	1f 91       	pop	r17
     280:	0f 91       	pop	r16
     282:	ff 90       	pop	r15
     284:	ef 90       	pop	r14
     286:	df 90       	pop	r13
     288:	cf 90       	pop	r12
     28a:	bf 90       	pop	r11
     28c:	af 90       	pop	r10
     28e:	9f 90       	pop	r9
     290:	8f 90       	pop	r8
     292:	7f 90       	pop	r7
     294:	6f 90       	pop	r6
     296:	5f 90       	pop	r5
     298:	4f 90       	pop	r4
     29a:	3f 90       	pop	r3
     29c:	2f 90       	pop	r2
     29e:	08 95       	ret

000002a0 <LCD_drawBlock>:
     2a0:	cf 92       	push	r12
     2a2:	df 92       	push	r13
     2a4:	ef 92       	push	r14
     2a6:	ff 92       	push	r15
     2a8:	0f 93       	push	r16
     2aa:	1f 93       	push	r17
     2ac:	cf 93       	push	r28
     2ae:	df 93       	push	r29
     2b0:	f8 2e       	mov	r15, r24
     2b2:	e6 2e       	mov	r14, r22
     2b4:	d4 2e       	mov	r13, r20
     2b6:	c2 2e       	mov	r12, r18
     2b8:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <LCD_setAddr>
     2bc:	85 b1       	in	r24, 0x05	; 5
     2be:	8b 7f       	andi	r24, 0xFB	; 251
     2c0:	85 b9       	out	0x05, r24	; 5
     2c2:	c0 e0       	ldi	r28, 0x00	; 0
     2c4:	d0 e0       	ldi	r29, 0x00	; 0
     2c6:	04 c0       	rjmp	.+8      	; 0x2d0 <LCD_drawBlock+0x30>
     2c8:	c8 01       	movw	r24, r16
     2ca:	0e 94 13 09 	call	0x1226	; 0x1226 <SPI_ControllerTx_16bit_stream>
     2ce:	21 96       	adiw	r28, 0x01	; 1
     2d0:	2f 2d       	mov	r18, r15
     2d2:	30 e0       	ldi	r19, 0x00	; 0
     2d4:	2d 19       	sub	r18, r13
     2d6:	31 09       	sbc	r19, r1
     2d8:	c9 01       	movw	r24, r18
     2da:	99 23       	and	r25, r25
     2dc:	24 f4       	brge	.+8      	; 0x2e6 <LCD_drawBlock+0x46>
     2de:	88 27       	eor	r24, r24
     2e0:	99 27       	eor	r25, r25
     2e2:	82 1b       	sub	r24, r18
     2e4:	93 0b       	sbc	r25, r19
     2e6:	01 96       	adiw	r24, 0x01	; 1
     2e8:	2e 2d       	mov	r18, r14
     2ea:	30 e0       	ldi	r19, 0x00	; 0
     2ec:	2c 19       	sub	r18, r12
     2ee:	31 09       	sbc	r19, r1
     2f0:	a9 01       	movw	r20, r18
     2f2:	22 f4       	brpl	.+8      	; 0x2fc <LCD_drawBlock+0x5c>
     2f4:	44 27       	eor	r20, r20
     2f6:	55 27       	eor	r21, r21
     2f8:	42 1b       	sub	r20, r18
     2fa:	53 0b       	sbc	r21, r19
     2fc:	84 9f       	mul	r24, r20
     2fe:	90 01       	movw	r18, r0
     300:	85 9f       	mul	r24, r21
     302:	30 0d       	add	r19, r0
     304:	94 9f       	mul	r25, r20
     306:	30 0d       	add	r19, r0
     308:	11 24       	eor	r1, r1
     30a:	c2 17       	cp	r28, r18
     30c:	d3 07       	cpc	r29, r19
     30e:	e4 f2       	brlt	.-72     	; 0x2c8 <LCD_drawBlock+0x28>
     310:	85 b1       	in	r24, 0x05	; 5
     312:	84 60       	ori	r24, 0x04	; 4
     314:	85 b9       	out	0x05, r24	; 5
     316:	df 91       	pop	r29
     318:	cf 91       	pop	r28
     31a:	1f 91       	pop	r17
     31c:	0f 91       	pop	r16
     31e:	ff 90       	pop	r15
     320:	ef 90       	pop	r14
     322:	df 90       	pop	r13
     324:	cf 90       	pop	r12
     326:	08 95       	ret

00000328 <LCD_setScreen>:
     328:	0f 93       	push	r16
     32a:	1f 93       	push	r17
     32c:	cf 93       	push	r28
     32e:	df 93       	push	r29
     330:	8c 01       	movw	r16, r24
     332:	2f e7       	ldi	r18, 0x7F	; 127
     334:	4f e9       	ldi	r20, 0x9F	; 159
     336:	60 e0       	ldi	r22, 0x00	; 0
     338:	80 e0       	ldi	r24, 0x00	; 0
     33a:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <LCD_setAddr>
     33e:	85 b1       	in	r24, 0x05	; 5
     340:	8b 7f       	andi	r24, 0xFB	; 251
     342:	85 b9       	out	0x05, r24	; 5
     344:	c0 e0       	ldi	r28, 0x00	; 0
     346:	d0 e0       	ldi	r29, 0x00	; 0
     348:	04 c0       	rjmp	.+8      	; 0x352 <LCD_setScreen+0x2a>
     34a:	c8 01       	movw	r24, r16
     34c:	0e 94 13 09 	call	0x1226	; 0x1226 <SPI_ControllerTx_16bit_stream>
     350:	21 96       	adiw	r28, 0x01	; 1
     352:	c1 15       	cp	r28, r1
     354:	80 e5       	ldi	r24, 0x50	; 80
     356:	d8 07       	cpc	r29, r24
     358:	c4 f3       	brlt	.-16     	; 0x34a <LCD_setScreen+0x22>
     35a:	85 b1       	in	r24, 0x05	; 5
     35c:	84 60       	ori	r24, 0x04	; 4
     35e:	85 b9       	out	0x05, r24	; 5
     360:	df 91       	pop	r29
     362:	cf 91       	pop	r28
     364:	1f 91       	pop	r17
     366:	0f 91       	pop	r16
     368:	08 95       	ret

0000036a <prepareCharUpdate>:
}

void prepareCharUpdate(CharUpdate *update, char oldChar, char newChar) {
     36a:	cf 93       	push	r28
     36c:	df 93       	push	r29
	uint8_t oldIndex = oldChar - 0x20;
     36e:	60 52       	subi	r22, 0x20	; 32
	uint8_t newIndex = newChar - 0x20;
     370:	40 52       	subi	r20, 0x20	; 32

	memset(update, 0, sizeof(CharUpdate));  // Clear the update structure
     372:	20 e5       	ldi	r18, 0x50	; 80
     374:	fc 01       	movw	r30, r24
     376:	11 92       	st	Z+, r1
     378:	2a 95       	dec	r18
     37a:	e9 f7       	brne	.-6      	; 0x376 <prepareCharUpdate+0xc>

	for (int col = 0; col < CHAR_WIDTH; col++) {
     37c:	c0 e0       	ldi	r28, 0x00	; 0
     37e:	d0 e0       	ldi	r29, 0x00	; 0
     380:	48 c0       	rjmp	.+144    	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
		uint8_t oldCol = ASCII[oldIndex][col];
     382:	26 2f       	mov	r18, r22
     384:	30 e0       	ldi	r19, 0x00	; 0
     386:	f9 01       	movw	r30, r18
     388:	ee 0f       	add	r30, r30
     38a:	ff 1f       	adc	r31, r31
     38c:	ee 0f       	add	r30, r30
     38e:	ff 1f       	adc	r31, r31
     390:	e2 0f       	add	r30, r18
     392:	f3 1f       	adc	r31, r19
     394:	e7 56       	subi	r30, 0x67	; 103
     396:	fe 4f       	sbci	r31, 0xFE	; 254
     398:	ec 0f       	add	r30, r28
     39a:	fd 1f       	adc	r31, r29
     39c:	20 81       	ld	r18, Z
		uint8_t newCol = ASCII[newIndex][col];
     39e:	e4 2f       	mov	r30, r20
     3a0:	f0 e0       	ldi	r31, 0x00	; 0
     3a2:	df 01       	movw	r26, r30
     3a4:	aa 0f       	add	r26, r26
     3a6:	bb 1f       	adc	r27, r27
     3a8:	aa 0f       	add	r26, r26
     3aa:	bb 1f       	adc	r27, r27
     3ac:	ea 0f       	add	r30, r26
     3ae:	fb 1f       	adc	r31, r27
     3b0:	e7 56       	subi	r30, 0x67	; 103
     3b2:	fe 4f       	sbci	r31, 0xFE	; 254
     3b4:	ec 0f       	add	r30, r28
     3b6:	fd 1f       	adc	r31, r29
     3b8:	50 81       	ld	r21, Z

		// Calculate foreground and background updates
		uint8_t fgMask = newCol & ~oldCol;  // New bits that are 1 where old bits are 0
     3ba:	72 2f       	mov	r23, r18
     3bc:	70 95       	com	r23
     3be:	75 23       	and	r23, r21
		uint8_t bgMask = ~newCol & oldCol;  // Old bits that are 1 where new bits are 0
     3c0:	50 95       	com	r21
     3c2:	52 23       	and	r21, r18

		// Set the corresponding bits in the update structure
		for (int row = 0; row < CHAR_HEIGHT; row++) {
     3c4:	a0 e0       	ldi	r26, 0x00	; 0
     3c6:	b0 e0       	ldi	r27, 0x00	; 0
     3c8:	20 c0       	rjmp	.+64     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
			update->foreground[row][col] = (fgMask >> row) & 1;
     3ca:	27 2f       	mov	r18, r23
     3cc:	30 e0       	ldi	r19, 0x00	; 0
     3ce:	0a 2e       	mov	r0, r26
     3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <prepareCharUpdate+0x6c>
     3d2:	35 95       	asr	r19
     3d4:	27 95       	ror	r18
     3d6:	0a 94       	dec	r0
     3d8:	e2 f7       	brpl	.-8      	; 0x3d2 <prepareCharUpdate+0x68>
     3da:	fd 01       	movw	r30, r26
     3dc:	ee 0f       	add	r30, r30
     3de:	ff 1f       	adc	r31, r31
     3e0:	ee 0f       	add	r30, r30
     3e2:	ff 1f       	adc	r31, r31
     3e4:	ea 0f       	add	r30, r26
     3e6:	fb 1f       	adc	r31, r27
     3e8:	e8 0f       	add	r30, r24
     3ea:	f9 1f       	adc	r31, r25
     3ec:	ec 0f       	add	r30, r28
     3ee:	fd 1f       	adc	r31, r29
     3f0:	21 70       	andi	r18, 0x01	; 1
     3f2:	20 83       	st	Z, r18
			update->background[row][col] = (bgMask >> row) & 1;
     3f4:	25 2f       	mov	r18, r21
     3f6:	30 e0       	ldi	r19, 0x00	; 0
     3f8:	0a 2e       	mov	r0, r26
     3fa:	02 c0       	rjmp	.+4      	; 0x400 <__EEPROM_REGION_LENGTH__>
     3fc:	35 95       	asr	r19
     3fe:	27 95       	ror	r18
     400:	0a 94       	dec	r0
     402:	e2 f7       	brpl	.-8      	; 0x3fc <prepareCharUpdate+0x92>
     404:	21 70       	andi	r18, 0x01	; 1
     406:	20 a7       	std	Z+40, r18	; 0x28
		// Calculate foreground and background updates
		uint8_t fgMask = newCol & ~oldCol;  // New bits that are 1 where old bits are 0
		uint8_t bgMask = ~newCol & oldCol;  // Old bits that are 1 where new bits are 0

		// Set the corresponding bits in the update structure
		for (int row = 0; row < CHAR_HEIGHT; row++) {
     408:	11 96       	adiw	r26, 0x01	; 1
     40a:	a8 30       	cpi	r26, 0x08	; 8
     40c:	b1 05       	cpc	r27, r1
     40e:	ec f2       	brlt	.-70     	; 0x3ca <prepareCharUpdate+0x60>
	uint8_t oldIndex = oldChar - 0x20;
	uint8_t newIndex = newChar - 0x20;

	memset(update, 0, sizeof(CharUpdate));  // Clear the update structure

	for (int col = 0; col < CHAR_WIDTH; col++) {
     410:	21 96       	adiw	r28, 0x01	; 1
     412:	c5 30       	cpi	r28, 0x05	; 5
     414:	d1 05       	cpc	r29, r1
     416:	0c f4       	brge	.+2      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
     418:	b4 cf       	rjmp	.-152    	; 0x382 <prepareCharUpdate+0x18>
		for (int row = 0; row < CHAR_HEIGHT; row++) {
			update->foreground[row][col] = (fgMask >> row) & 1;
			update->background[row][col] = (bgMask >> row) & 1;
		}
	}
}
     41a:	df 91       	pop	r29
     41c:	cf 91       	pop	r28
     41e:	08 95       	ret

00000420 <redrawChar>:


void redrawChar(uint8_t x, uint8_t y, CharUpdate *update, uint16_t fColor, uint16_t bColor, uint8_t multiplier) {
     420:	5f 92       	push	r5
     422:	6f 92       	push	r6
     424:	7f 92       	push	r7
     426:	8f 92       	push	r8
     428:	9f 92       	push	r9
     42a:	af 92       	push	r10
     42c:	bf 92       	push	r11
     42e:	cf 92       	push	r12
     430:	df 92       	push	r13
     432:	ef 92       	push	r14
     434:	ff 92       	push	r15
     436:	0f 93       	push	r16
     438:	1f 93       	push	r17
     43a:	cf 93       	push	r28
     43c:	df 93       	push	r29
     43e:	98 2e       	mov	r9, r24
     440:	f6 2e       	mov	r15, r22
     442:	5a 01       	movw	r10, r20
     444:	52 2e       	mov	r5, r18
     446:	63 2e       	mov	r6, r19
     448:	70 2e       	mov	r7, r16
     44a:	81 2e       	mov	r8, r17
	// Loop through each pixel in the character matrix (5x8)
	for (int col = 0; col < CHAR_WIDTH; col++) {
     44c:	c1 2c       	mov	r12, r1
     44e:	d1 2c       	mov	r13, r1
     450:	47 c0       	rjmp	.+142    	; 0x4e0 <redrawChar+0xc0>
		for (int row = 0; row < CHAR_HEIGHT; row++) {
			uint16_t baseX = x + col * multiplier;
     452:	2e 2d       	mov	r18, r14
     454:	30 e0       	ldi	r19, 0x00	; 0
     456:	c2 9e       	mul	r12, r18
     458:	c0 01       	movw	r24, r0
     45a:	c3 9e       	mul	r12, r19
     45c:	90 0d       	add	r25, r0
     45e:	d2 9e       	mul	r13, r18
     460:	90 0d       	add	r25, r0
     462:	11 24       	eor	r1, r1
     464:	89 0d       	add	r24, r9
     466:	91 1d       	adc	r25, r1
			uint16_t baseY = y + row * multiplier;
     468:	c2 9f       	mul	r28, r18
     46a:	b0 01       	movw	r22, r0
     46c:	c3 9f       	mul	r28, r19
     46e:	70 0d       	add	r23, r0
     470:	d2 9f       	mul	r29, r18
     472:	70 0d       	add	r23, r0
     474:	11 24       	eor	r1, r1
     476:	6f 0d       	add	r22, r15
     478:	71 1d       	adc	r23, r1

			// Determine the appropriate color for each block based on the update arrays
			uint16_t color;
			if (update->foreground[row][col]) {
     47a:	fe 01       	movw	r30, r28
     47c:	ee 0f       	add	r30, r30
     47e:	ff 1f       	adc	r31, r31
     480:	ee 0f       	add	r30, r30
     482:	ff 1f       	adc	r31, r31
     484:	ec 0f       	add	r30, r28
     486:	fd 1f       	adc	r31, r29
     488:	ea 0d       	add	r30, r10
     48a:	fb 1d       	adc	r31, r11
     48c:	ec 0d       	add	r30, r12
     48e:	fd 1d       	adc	r31, r13
     490:	20 81       	ld	r18, Z
     492:	21 11       	cpse	r18, r1
     494:	11 c0       	rjmp	.+34     	; 0x4b8 <redrawChar+0x98>
				color = fColor;  // Draw foreground color if foreground is set
				} else if (update->background[row][col]) {
     496:	fe 01       	movw	r30, r28
     498:	ee 0f       	add	r30, r30
     49a:	ff 1f       	adc	r31, r31
     49c:	ee 0f       	add	r30, r30
     49e:	ff 1f       	adc	r31, r31
     4a0:	ec 0f       	add	r30, r28
     4a2:	fd 1f       	adc	r31, r29
     4a4:	ea 0d       	add	r30, r10
     4a6:	fb 1d       	adc	r31, r11
     4a8:	ec 0d       	add	r30, r12
     4aa:	fd 1d       	adc	r31, r13
     4ac:	20 a5       	ldd	r18, Z+40	; 0x28
     4ae:	22 23       	and	r18, r18
     4b0:	61 f0       	breq	.+24     	; 0x4ca <redrawChar+0xaa>
				color = bColor;  // Draw background color if background is set
     4b2:	07 2d       	mov	r16, r7
     4b4:	18 2d       	mov	r17, r8
     4b6:	02 c0       	rjmp	.+4      	; 0x4bc <redrawChar+0x9c>
			uint16_t baseY = y + row * multiplier;

			// Determine the appropriate color for each block based on the update arrays
			uint16_t color;
			if (update->foreground[row][col]) {
				color = fColor;  // Draw foreground color if foreground is set
     4b8:	05 2d       	mov	r16, r5
     4ba:	16 2d       	mov	r17, r6
				} else if (update->background[row][col]) {
				color = bColor;  // Draw background color if background is set
				} else {
				continue;  // Skip drawing if no updates are needed
			}
            LCD_drawBlock(baseX, baseY, baseX + multiplier - 1, baseY + multiplier, color);			// Draw a block of size multiplier x multiplier for each pixel
     4bc:	2e 2d       	mov	r18, r14
     4be:	26 0f       	add	r18, r22
     4c0:	4e 2d       	mov	r20, r14
     4c2:	48 0f       	add	r20, r24
     4c4:	41 50       	subi	r20, 0x01	; 1
     4c6:	0e 94 50 01 	call	0x2a0	; 0x2a0 <LCD_drawBlock>


void redrawChar(uint8_t x, uint8_t y, CharUpdate *update, uint16_t fColor, uint16_t bColor, uint8_t multiplier) {
	// Loop through each pixel in the character matrix (5x8)
	for (int col = 0; col < CHAR_WIDTH; col++) {
		for (int row = 0; row < CHAR_HEIGHT; row++) {
     4ca:	21 96       	adiw	r28, 0x01	; 1
     4cc:	02 c0       	rjmp	.+4      	; 0x4d2 <redrawChar+0xb2>
     4ce:	c0 e0       	ldi	r28, 0x00	; 0
     4d0:	d0 e0       	ldi	r29, 0x00	; 0
     4d2:	c8 30       	cpi	r28, 0x08	; 8
     4d4:	d1 05       	cpc	r29, r1
     4d6:	0c f4       	brge	.+2      	; 0x4da <redrawChar+0xba>
     4d8:	bc cf       	rjmp	.-136    	; 0x452 <redrawChar+0x32>
}


void redrawChar(uint8_t x, uint8_t y, CharUpdate *update, uint16_t fColor, uint16_t bColor, uint8_t multiplier) {
	// Loop through each pixel in the character matrix (5x8)
	for (int col = 0; col < CHAR_WIDTH; col++) {
     4da:	8f ef       	ldi	r24, 0xFF	; 255
     4dc:	c8 1a       	sub	r12, r24
     4de:	d8 0a       	sbc	r13, r24
     4e0:	85 e0       	ldi	r24, 0x05	; 5
     4e2:	c8 16       	cp	r12, r24
     4e4:	d1 04       	cpc	r13, r1
     4e6:	9c f3       	brlt	.-26     	; 0x4ce <redrawChar+0xae>
			}
            LCD_drawBlock(baseX, baseY, baseX + multiplier - 1, baseY + multiplier, color);			// Draw a block of size multiplier x multiplier for each pixel
			
		}
	}
}
     4e8:	df 91       	pop	r29
     4ea:	cf 91       	pop	r28
     4ec:	1f 91       	pop	r17
     4ee:	0f 91       	pop	r16
     4f0:	ff 90       	pop	r15
     4f2:	ef 90       	pop	r14
     4f4:	df 90       	pop	r13
     4f6:	cf 90       	pop	r12
     4f8:	bf 90       	pop	r11
     4fa:	af 90       	pop	r10
     4fc:	9f 90       	pop	r9
     4fe:	8f 90       	pop	r8
     500:	7f 90       	pop	r7
     502:	6f 90       	pop	r6
     504:	5f 90       	pop	r5
     506:	08 95       	ret

00000508 <LCD_drawString>:




void LCD_drawString(uint8_t x, uint8_t y, char* str, uint16_t fg, uint16_t bg, uint16_t multiplier)
{
     508:	8f 92       	push	r8
     50a:	9f 92       	push	r9
     50c:	af 92       	push	r10
     50e:	bf 92       	push	r11
     510:	cf 92       	push	r12
     512:	df 92       	push	r13
     514:	ef 92       	push	r14
     516:	ff 92       	push	r15
     518:	0f 93       	push	r16
     51a:	1f 93       	push	r17
     51c:	cf 93       	push	r28
     51e:	df 93       	push	r29
     520:	88 2e       	mov	r8, r24
     522:	96 2e       	mov	r9, r22
     524:	ea 01       	movw	r28, r20
     526:	59 01       	movw	r10, r18
     528:	68 01       	movw	r12, r16
     52a:	fe 2c       	mov	r15, r14
	while(*str){
     52c:	16 c0       	rjmp	.+44     	; 0x55a <LCD_drawString+0x52>
		LCD_drawBigChar(x,y,*str++,fg,bg, multiplier);
     52e:	21 96       	adiw	r28, 0x01	; 1
     530:	50 e0       	ldi	r21, 0x00	; 0
     532:	ef 2c       	mov	r14, r15
     534:	86 01       	movw	r16, r12
     536:	95 01       	movw	r18, r10
     538:	69 2d       	mov	r22, r9
     53a:	88 2d       	mov	r24, r8
     53c:	0e 94 86 00 	call	0x10c	; 0x10c <LCD_drawBigChar>
		x+=(8 * multiplier)  - (3 - multiplier)*3;
     540:	9f 2d       	mov	r25, r15
     542:	99 0f       	add	r25, r25
     544:	89 2f       	mov	r24, r25
     546:	88 0f       	add	r24, r24
     548:	88 0f       	add	r24, r24
     54a:	89 0f       	add	r24, r25
     54c:	8f 0d       	add	r24, r15
     54e:	88 0d       	add	r24, r8
     550:	0f 2e       	mov	r0, r31
     552:	f7 ef       	ldi	r31, 0xF7	; 247
     554:	8f 2e       	mov	r8, r31
     556:	f0 2d       	mov	r31, r0
     558:	88 0e       	add	r8, r24



void LCD_drawString(uint8_t x, uint8_t y, char* str, uint16_t fg, uint16_t bg, uint16_t multiplier)
{
	while(*str){
     55a:	48 81       	ld	r20, Y
     55c:	41 11       	cpse	r20, r1
     55e:	e7 cf       	rjmp	.-50     	; 0x52e <LCD_drawString+0x26>
		LCD_drawBigChar(x,y,*str++,fg,bg, multiplier);
		x+=(8 * multiplier)  - (3 - multiplier)*3;
	}
     560:	df 91       	pop	r29
     562:	cf 91       	pop	r28
     564:	1f 91       	pop	r17
     566:	0f 91       	pop	r16
     568:	ff 90       	pop	r15
     56a:	ef 90       	pop	r14
     56c:	df 90       	pop	r13
     56e:	cf 90       	pop	r12
     570:	bf 90       	pop	r11
     572:	af 90       	pop	r10
     574:	9f 90       	pop	r9
     576:	8f 90       	pop	r8
     578:	08 95       	ret

0000057a <I2C_start>:
	TWCR0 = (1<<TWINT) | (1<<TWSTA) | (1 <<TWEN); //start
	while (!(TWCR0 & (1<<TWINT)));
}

void led_setup() {
	accCount = 0;
     57a:	84 ea       	ldi	r24, 0xA4	; 164
     57c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     580:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     584:	88 23       	and	r24, r24
     586:	e4 f7       	brge	.-8      	; 0x580 <I2C_start+0x6>
     588:	08 95       	ret

0000058a <I2C_stop>:
     58a:	84 e9       	ldi	r24, 0x94	; 148
     58c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     590:	08 95       	ret

00000592 <I2C_write>:
     592:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     596:	84 e8       	ldi	r24, 0x84	; 132
     598:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     59c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     5a0:	88 23       	and	r24, r24
     5a2:	e4 f7       	brge	.-8      	; 0x59c <I2C_write+0xa>
     5a4:	08 95       	ret

000005a6 <I2C_readNA>:
     5a6:	84 e8       	ldi	r24, 0x84	; 132
     5a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     5ac:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     5b0:	88 23       	and	r24, r24
     5b2:	e4 f7       	brge	.-8      	; 0x5ac <I2C_readNA+0x6>
     5b4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     5b8:	08 95       	ret

000005ba <I2C_SETUP>:
     5ba:	e8 eb       	ldi	r30, 0xB8	; 184
     5bc:	f0 e0       	ldi	r31, 0x00	; 0
     5be:	20 81       	ld	r18, Z
     5c0:	81 e0       	ldi	r24, 0x01	; 1
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	02 c0       	rjmp	.+4      	; 0x5ca <I2C_SETUP+0x10>
     5c6:	88 0f       	add	r24, r24
     5c8:	99 1f       	adc	r25, r25
     5ca:	2a 95       	dec	r18
     5cc:	e2 f7       	brpl	.-8      	; 0x5c6 <I2C_SETUP+0xc>
     5ce:	90 81       	ld	r25, Z
     5d0:	89 2b       	or	r24, r25
     5d2:	80 83       	st	Z, r24
     5d4:	a9 eb       	ldi	r26, 0xB9	; 185
     5d6:	b0 e0       	ldi	r27, 0x00	; 0
     5d8:	8c 91       	ld	r24, X
     5da:	82 60       	ori	r24, 0x02	; 2
     5dc:	8c 93       	st	X, r24
     5de:	88 e4       	ldi	r24, 0x48	; 72
     5e0:	80 83       	st	Z, r24
     5e2:	84 e0       	ldi	r24, 0x04	; 4
     5e4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     5e8:	08 95       	ret

000005ea <ACC_SETUP>:
     5ea:	0e 94 bd 02 	call	0x57a	; 0x57a <I2C_start>
     5ee:	80 ed       	ldi	r24, 0xD0	; 208
     5f0:	0e 94 c9 02 	call	0x592	; 0x592 <I2C_write>
     5f4:	8a e6       	ldi	r24, 0x6A	; 106
     5f6:	0e 94 c9 02 	call	0x592	; 0x592 <I2C_write>
     5fa:	80 e0       	ldi	r24, 0x00	; 0
     5fc:	0e 94 c9 02 	call	0x592	; 0x592 <I2C_write>
     600:	0e 94 bd 02 	call	0x57a	; 0x57a <I2C_start>
     604:	80 ed       	ldi	r24, 0xD0	; 208
     606:	0e 94 c9 02 	call	0x592	; 0x592 <I2C_write>
     60a:	8b e6       	ldi	r24, 0x6B	; 107
     60c:	0e 94 c9 02 	call	0x592	; 0x592 <I2C_write>
     610:	80 e0       	ldi	r24, 0x00	; 0
     612:	0e 94 c9 02 	call	0x592	; 0x592 <I2C_write>
     616:	0e 94 c5 02 	call	0x58a	; 0x58a <I2C_stop>
     61a:	08 95       	ret

0000061c <GET_ACC>:
     61c:	0e 94 bd 02 	call	0x57a	; 0x57a <I2C_start>
     620:	80 ed       	ldi	r24, 0xD0	; 208
     622:	0e 94 c9 02 	call	0x592	; 0x592 <I2C_write>
     626:	8d e3       	ldi	r24, 0x3D	; 61
     628:	0e 94 c9 02 	call	0x592	; 0x592 <I2C_write>
     62c:	0e 94 bd 02 	call	0x57a	; 0x57a <I2C_start>
     630:	81 ed       	ldi	r24, 0xD1	; 209
     632:	0e 94 c9 02 	call	0x592	; 0x592 <I2C_write>
     636:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <I2C_readNA>
     63a:	80 93 8d 03 	sts	0x038D, r24	; 0x80038d <accValH>
     63e:	0e 94 bd 02 	call	0x57a	; 0x57a <I2C_start>
     642:	80 ed       	ldi	r24, 0xD0	; 208
     644:	0e 94 c9 02 	call	0x592	; 0x592 <I2C_write>
     648:	8e e3       	ldi	r24, 0x3E	; 62
     64a:	0e 94 c9 02 	call	0x592	; 0x592 <I2C_write>
     64e:	0e 94 bd 02 	call	0x57a	; 0x57a <I2C_start>
     652:	81 ed       	ldi	r24, 0xD1	; 209
     654:	0e 94 c9 02 	call	0x592	; 0x592 <I2C_write>
     658:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <I2C_readNA>
     65c:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <accValL>
     660:	0e 94 c5 02 	call	0x58a	; 0x58a <I2C_stop>
     664:	08 95       	ret

00000666 <pwm_setup>:
}

void pwm_setup() {

	cli();   // Disable global interrupts
     666:	f8 94       	cli
	DDRD |= (1 << DDD5);
     668:	8a b1       	in	r24, 0x0a	; 10
     66a:	80 62       	ori	r24, 0x20	; 32
     66c:	8a b9       	out	0x0a, r24	; 10

	// Timer0, prescale of 1
	TCCR0B |= (1 << CS00);
     66e:	85 b5       	in	r24, 0x25	; 37
     670:	81 60       	ori	r24, 0x01	; 1
     672:	85 bd       	out	0x25, r24	; 37

	// Timer1, Fast PWM mode
	TCCR0A |= (1 << WGM00);
     674:	84 b5       	in	r24, 0x24	; 36
     676:	81 60       	ori	r24, 0x01	; 1
     678:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1 << WGM01);
     67a:	84 b5       	in	r24, 0x24	; 36
     67c:	82 60       	ori	r24, 0x02	; 2
     67e:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << WGM02);
     680:	85 b5       	in	r24, 0x25	; 37
     682:	88 60       	ori	r24, 0x08	; 8
     684:	85 bd       	out	0x25, r24	; 37

	OCR0A = 39;              // Sets frequency, 400kHz
     686:	87 e2       	ldi	r24, 0x27	; 39
     688:	87 bd       	out	0x27, r24	; 39
	OCR0B = OCR0A * 1 / 10;   // Sets duty cycle, 75%
     68a:	87 b5       	in	r24, 0x27	; 39
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	6a e0       	ldi	r22, 0x0A	; 10
     690:	70 e0       	ldi	r23, 0x00	; 0
     692:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <__divmodhi4>
     696:	68 bd       	out	0x28, r22	; 40

	// Non-inverting mode
	// Clear on Compare Match
	TCCR0A |= (1 << COM0B1);
     698:	84 b5       	in	r24, 0x24	; 36
     69a:	80 62       	ori	r24, 0x20	; 32
     69c:	84 bd       	out	0x24, r24	; 36

	sei();   // Enable global interrupts
     69e:	78 94       	sei
     6a0:	08 95       	ret

000006a2 <adc_setup>:

void adc_setup() {
	// code from nick's atmega example
	// Setup for ADC (10bit = 0-1023)
	// Clear power reduction bit for ADC
	PRR0 &= ~(1 << PRADC);
     6a2:	e4 e6       	ldi	r30, 0x64	; 100
     6a4:	f0 e0       	ldi	r31, 0x00	; 0
     6a6:	80 81       	ld	r24, Z
     6a8:	8e 7f       	andi	r24, 0xFE	; 254
     6aa:	80 83       	st	Z, r24

	// Select Vref = AVcc
	ADMUX |= (1 << REFS0);
     6ac:	ac e7       	ldi	r26, 0x7C	; 124
     6ae:	b0 e0       	ldi	r27, 0x00	; 0
     6b0:	8c 91       	ld	r24, X
     6b2:	80 64       	ori	r24, 0x40	; 64
     6b4:	8c 93       	st	X, r24
	ADMUX |= (1 << REFS1);
     6b6:	8c 91       	ld	r24, X
     6b8:	80 68       	ori	r24, 0x80	; 128
     6ba:	8c 93       	st	X, r24

	// Set the ADC clock div by 128
	// 16M/128=125kHz
	ADCSRA |= (1 << ADPS0);
     6bc:	ea e7       	ldi	r30, 0x7A	; 122
     6be:	f0 e0       	ldi	r31, 0x00	; 0
     6c0:	80 81       	ld	r24, Z
     6c2:	81 60       	ori	r24, 0x01	; 1
     6c4:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS1);
     6c6:	80 81       	ld	r24, Z
     6c8:	82 60       	ori	r24, 0x02	; 2
     6ca:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS2);
     6cc:	80 81       	ld	r24, Z
     6ce:	84 60       	ori	r24, 0x04	; 4
     6d0:	80 83       	st	Z, r24

	// Select Channel ADC0 (pin C0)
	ADMUX &= ~(1 << MUX0);
     6d2:	8c 91       	ld	r24, X
     6d4:	8e 7f       	andi	r24, 0xFE	; 254
     6d6:	8c 93       	st	X, r24
	ADMUX &= ~(1 << MUX1);
     6d8:	8c 91       	ld	r24, X
     6da:	8d 7f       	andi	r24, 0xFD	; 253
     6dc:	8c 93       	st	X, r24
	ADMUX &= ~(1 << MUX2);
     6de:	8c 91       	ld	r24, X
     6e0:	8b 7f       	andi	r24, 0xFB	; 251
     6e2:	8c 93       	st	X, r24
	ADMUX &= ~(1 << MUX3);
     6e4:	8c 91       	ld	r24, X
     6e6:	87 7f       	andi	r24, 0xF7	; 247
     6e8:	8c 93       	st	X, r24

	ADCSRA |= (1 << ADATE);   // Autotriggering of ADC
     6ea:	80 81       	ld	r24, Z
     6ec:	80 62       	ori	r24, 0x20	; 32
     6ee:	80 83       	st	Z, r24

	// Free running mode ADTS[2:0] = 000
	ADCSRB &= ~(1 << ADTS0);
     6f0:	ab e7       	ldi	r26, 0x7B	; 123
     6f2:	b0 e0       	ldi	r27, 0x00	; 0
     6f4:	8c 91       	ld	r24, X
     6f6:	8e 7f       	andi	r24, 0xFE	; 254
     6f8:	8c 93       	st	X, r24
	ADCSRB &= ~(1 << ADTS1);
     6fa:	8c 91       	ld	r24, X
     6fc:	8d 7f       	andi	r24, 0xFD	; 253
     6fe:	8c 93       	st	X, r24
	ADCSRB &= ~(1 << ADTS2);
     700:	8c 91       	ld	r24, X
     702:	8b 7f       	andi	r24, 0xFB	; 251
     704:	8c 93       	st	X, r24

	// Disable digital input buffer on ADC pin
	DIDR0 |= (1 << ADC0D);
     706:	ae e7       	ldi	r26, 0x7E	; 126
     708:	b0 e0       	ldi	r27, 0x00	; 0
     70a:	8c 91       	ld	r24, X
     70c:	81 60       	ori	r24, 0x01	; 1
     70e:	8c 93       	st	X, r24

	// Enable ADC
	ADCSRA |= (1 << ADEN);
     710:	80 81       	ld	r24, Z
     712:	80 68       	ori	r24, 0x80	; 128
     714:	80 83       	st	Z, r24

	// Start conversion
	ADCSRA |= (1 << ADSC);
     716:	80 81       	ld	r24, Z
     718:	80 64       	ori	r24, 0x40	; 64
     71a:	80 83       	st	Z, r24
     71c:	08 95       	ret

0000071e <pinchange_setup>:
}


void pinchange_setup() {
	cli();
     71e:	f8 94       	cli
	DDRB |= (1 << DDRB5);
     720:	84 b1       	in	r24, 0x04	; 4
     722:	80 62       	ori	r24, 0x20	; 32
     724:	84 b9       	out	0x04, r24	; 4
	DDRC &= ~(1 << DDRC2);
     726:	87 b1       	in	r24, 0x07	; 7
     728:	8b 7f       	andi	r24, 0xFB	; 251
     72a:	87 b9       	out	0x07, r24	; 7

	PCICR |= (1 << PCIE1);
     72c:	e8 e6       	ldi	r30, 0x68	; 104
     72e:	f0 e0       	ldi	r31, 0x00	; 0
     730:	80 81       	ld	r24, Z
     732:	82 60       	ori	r24, 0x02	; 2
     734:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT10);
     736:	ec e6       	ldi	r30, 0x6C	; 108
     738:	f0 e0       	ldi	r31, 0x00	; 0
     73a:	80 81       	ld	r24, Z
     73c:	84 60       	ori	r24, 0x04	; 4
     73e:	80 83       	st	Z, r24
	PORTC |= (1 << PORTC2);
     740:	88 b1       	in	r24, 0x08	; 8
     742:	84 60       	ori	r24, 0x04	; 4
     744:	88 b9       	out	0x08, r24	; 8
	sei();
     746:	78 94       	sei
     748:	08 95       	ret

0000074a <Initialize>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     74a:	2f ef       	ldi	r18, 0xFF	; 255
     74c:	89 e6       	ldi	r24, 0x69	; 105
     74e:	98 e1       	ldi	r25, 0x18	; 24
     750:	21 50       	subi	r18, 0x01	; 1
     752:	80 40       	sbci	r24, 0x00	; 0
     754:	90 40       	sbci	r25, 0x00	; 0
     756:	e1 f7       	brne	.-8      	; 0x750 <Initialize+0x6>
     758:	00 c0       	rjmp	.+0      	; 0x75a <Initialize+0x10>
     75a:	00 00       	nop
}

void Initialize()
{
	_delay_ms(500);
	lcd_init();
     75c:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <lcd_init>
	LCD_setScreen(BLACK);
     760:	80 e0       	ldi	r24, 0x00	; 0
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	0e 94 94 01 	call	0x328	; 0x328 <LCD_setScreen>
	UART_init(BAUD_PRESCALER);
     768:	87 e6       	ldi	r24, 0x67	; 103
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	0e 94 99 09 	call	0x1332	; 0x1332 <UART_init>
     770:	2f ef       	ldi	r18, 0xFF	; 255
     772:	89 e6       	ldi	r24, 0x69	; 105
     774:	98 e1       	ldi	r25, 0x18	; 24
     776:	21 50       	subi	r18, 0x01	; 1
     778:	80 40       	sbci	r24, 0x00	; 0
     77a:	90 40       	sbci	r25, 0x00	; 0
     77c:	e1 f7       	brne	.-8      	; 0x776 <Initialize+0x2c>
     77e:	00 c0       	rjmp	.+0      	; 0x780 <Initialize+0x36>
     780:	00 00       	nop
	_delay_ms(500);
	adc_setup();
     782:	0e 94 51 03 	call	0x6a2	; 0x6a2 <adc_setup>
	pwm_setup();
     786:	0e 94 33 03 	call	0x666	; 0x666 <pwm_setup>
	pinchange_setup();
     78a:	0e 94 8f 03 	call	0x71e	; 0x71e <pinchange_setup>
     78e:	2f ef       	ldi	r18, 0xFF	; 255
     790:	89 e6       	ldi	r24, 0x69	; 105
     792:	98 e1       	ldi	r25, 0x18	; 24
     794:	21 50       	subi	r18, 0x01	; 1
     796:	80 40       	sbci	r24, 0x00	; 0
     798:	90 40       	sbci	r25, 0x00	; 0
     79a:	e1 f7       	brne	.-8      	; 0x794 <Initialize+0x4a>
     79c:	00 c0       	rjmp	.+0      	; 0x79e <Initialize+0x54>
     79e:	00 00       	nop
	_delay_ms(500); 
	I2C_SETUP();
     7a0:	0e 94 dd 02 	call	0x5ba	; 0x5ba <I2C_SETUP>
     7a4:	2f ef       	ldi	r18, 0xFF	; 255
     7a6:	80 e7       	ldi	r24, 0x70	; 112
     7a8:	92 e0       	ldi	r25, 0x02	; 2
     7aa:	21 50       	subi	r18, 0x01	; 1
     7ac:	80 40       	sbci	r24, 0x00	; 0
     7ae:	90 40       	sbci	r25, 0x00	; 0
     7b0:	e1 f7       	brne	.-8      	; 0x7aa <Initialize+0x60>
     7b2:	00 c0       	rjmp	.+0      	; 0x7b4 <Initialize+0x6a>
     7b4:	00 00       	nop
	_delay_ms(50);
	//setup_ROTC();
	ACC_SETUP();
     7b6:	0e 94 f5 02 	call	0x5ea	; 0x5ea <ACC_SETUP>
     7ba:	2f ef       	ldi	r18, 0xFF	; 255
     7bc:	89 e6       	ldi	r24, 0x69	; 105
     7be:	98 e1       	ldi	r25, 0x18	; 24
     7c0:	21 50       	subi	r18, 0x01	; 1
     7c2:	80 40       	sbci	r24, 0x00	; 0
     7c4:	90 40       	sbci	r25, 0x00	; 0
     7c6:	e1 f7       	brne	.-8      	; 0x7c0 <Initialize+0x76>
     7c8:	00 c0       	rjmp	.+0      	; 0x7ca <Initialize+0x80>
     7ca:	00 00       	nop
     7cc:	08 95       	ret

000007ce <draw_speed>:
	_delay_ms(500);
}


void draw_speed(void) {
     7ce:	bf 92       	push	r11
     7d0:	cf 92       	push	r12
     7d2:	df 92       	push	r13
     7d4:	ef 92       	push	r14
     7d6:	ff 92       	push	r15
     7d8:	0f 93       	push	r16
     7da:	1f 93       	push	r17
     7dc:	cf 93       	push	r28
     7de:	df 93       	push	r29
	char oldchar1;
	char oldchar2;
	char newchar1;
	char newchar2;
	if (old_speed < 100) {
     7e0:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <old_speed>
     7e4:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <old_speed+0x1>
     7e8:	e4 36       	cpi	r30, 0x64	; 100
     7ea:	f1 05       	cpc	r31, r1
     7ec:	28 f5       	brcc	.+74     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
		oldchar1 = '0' + (old_speed / 10);
     7ee:	9f 01       	movw	r18, r30
     7f0:	ad ec       	ldi	r26, 0xCD	; 205
     7f2:	bc ec       	ldi	r27, 0xCC	; 204
     7f4:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <__umulhisi3>
     7f8:	ac 01       	movw	r20, r24
     7fa:	56 95       	lsr	r21
     7fc:	47 95       	ror	r20
     7fe:	56 95       	lsr	r21
     800:	47 95       	ror	r20
     802:	56 95       	lsr	r21
     804:	47 95       	ror	r20
     806:	0f 2e       	mov	r0, r31
     808:	f0 e3       	ldi	r31, 0x30	; 48
     80a:	cf 2e       	mov	r12, r31
     80c:	f0 2d       	mov	r31, r0
     80e:	c4 0e       	add	r12, r20
		oldchar2 = '0' + (old_speed % 10);
     810:	ca 01       	movw	r24, r20
     812:	88 0f       	add	r24, r24
     814:	99 1f       	adc	r25, r25
     816:	44 0f       	add	r20, r20
     818:	55 1f       	adc	r21, r21
     81a:	44 0f       	add	r20, r20
     81c:	55 1f       	adc	r21, r21
     81e:	44 0f       	add	r20, r20
     820:	55 1f       	adc	r21, r21
     822:	48 0f       	add	r20, r24
     824:	59 1f       	adc	r21, r25
     826:	cf 01       	movw	r24, r30
     828:	84 1b       	sub	r24, r20
     82a:	95 0b       	sbc	r25, r21
     82c:	0f 2e       	mov	r0, r31
     82e:	f0 e3       	ldi	r31, 0x30	; 48
     830:	ff 2e       	mov	r15, r31
     832:	f0 2d       	mov	r31, r0
     834:	f8 0e       	add	r15, r24
     836:	2a c0       	rjmp	.+84     	; 0x88c <__DATA_REGION_LENGTH__+0x8c>
	} else {
		oldchar1 = '0' + (old_speed / 100);
     838:	ef 01       	movw	r28, r30
     83a:	d6 95       	lsr	r29
     83c:	c7 95       	ror	r28
     83e:	d6 95       	lsr	r29
     840:	c7 95       	ror	r28
     842:	9e 01       	movw	r18, r28
     844:	ab e7       	ldi	r26, 0x7B	; 123
     846:	b4 e1       	ldi	r27, 0x14	; 20
     848:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <__umulhisi3>
     84c:	ac 01       	movw	r20, r24
     84e:	56 95       	lsr	r21
     850:	47 95       	ror	r20
     852:	0f 2e       	mov	r0, r31
     854:	f0 e3       	ldi	r31, 0x30	; 48
     856:	cf 2e       	mov	r12, r31
     858:	f0 2d       	mov	r31, r0
     85a:	c4 0e       	add	r12, r20
		oldchar2 = '0' + (old_speed  % 100) / 10;
     85c:	24 e6       	ldi	r18, 0x64	; 100
     85e:	24 9f       	mul	r18, r20
     860:	c0 01       	movw	r24, r0
     862:	25 9f       	mul	r18, r21
     864:	90 0d       	add	r25, r0
     866:	11 24       	eor	r1, r1
     868:	9f 01       	movw	r18, r30
     86a:	28 1b       	sub	r18, r24
     86c:	39 0b       	sbc	r19, r25
     86e:	ad ec       	ldi	r26, 0xCD	; 205
     870:	bc ec       	ldi	r27, 0xCC	; 204
     872:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <__umulhisi3>
     876:	96 95       	lsr	r25
     878:	87 95       	ror	r24
     87a:	96 95       	lsr	r25
     87c:	87 95       	ror	r24
     87e:	96 95       	lsr	r25
     880:	87 95       	ror	r24
     882:	0f 2e       	mov	r0, r31
     884:	f0 e3       	ldi	r31, 0x30	; 48
     886:	ff 2e       	mov	r15, r31
     888:	f0 2d       	mov	r31, r0
     88a:	f8 0e       	add	r15, r24
	}
	if (speed < 100) {
     88c:	c0 91 12 01 	lds	r28, 0x0112	; 0x800112 <speed>
     890:	d0 91 13 01 	lds	r29, 0x0113	; 0x800113 <speed+0x1>
     894:	c4 36       	cpi	r28, 0x64	; 100
     896:	d1 05       	cpc	r29, r1
     898:	28 f5       	brcc	.+74     	; 0x8e4 <__DATA_REGION_LENGTH__+0xe4>
		newchar1 = '0' + (speed / 10);
     89a:	9e 01       	movw	r18, r28
     89c:	ad ec       	ldi	r26, 0xCD	; 205
     89e:	bc ec       	ldi	r27, 0xCC	; 204
     8a0:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <__umulhisi3>
     8a4:	ac 01       	movw	r20, r24
     8a6:	56 95       	lsr	r21
     8a8:	47 95       	ror	r20
     8aa:	56 95       	lsr	r21
     8ac:	47 95       	ror	r20
     8ae:	56 95       	lsr	r21
     8b0:	47 95       	ror	r20
     8b2:	0f 2e       	mov	r0, r31
     8b4:	f0 e3       	ldi	r31, 0x30	; 48
     8b6:	bf 2e       	mov	r11, r31
     8b8:	f0 2d       	mov	r31, r0
     8ba:	b4 0e       	add	r11, r20
		newchar2 = '0' + (speed % 10);
     8bc:	ca 01       	movw	r24, r20
     8be:	88 0f       	add	r24, r24
     8c0:	99 1f       	adc	r25, r25
     8c2:	44 0f       	add	r20, r20
     8c4:	55 1f       	adc	r21, r21
     8c6:	44 0f       	add	r20, r20
     8c8:	55 1f       	adc	r21, r21
     8ca:	44 0f       	add	r20, r20
     8cc:	55 1f       	adc	r21, r21
     8ce:	48 0f       	add	r20, r24
     8d0:	59 1f       	adc	r21, r25
     8d2:	ce 01       	movw	r24, r28
     8d4:	84 1b       	sub	r24, r20
     8d6:	95 0b       	sbc	r25, r21
     8d8:	0f 2e       	mov	r0, r31
     8da:	f0 e3       	ldi	r31, 0x30	; 48
     8dc:	df 2e       	mov	r13, r31
     8de:	f0 2d       	mov	r31, r0
     8e0:	d8 0e       	add	r13, r24
     8e2:	2a c0       	rjmp	.+84     	; 0x938 <__stack+0x39>
		} else {
		newchar1 = '0' + (speed / 100);
     8e4:	8e 01       	movw	r16, r28
     8e6:	16 95       	lsr	r17
     8e8:	07 95       	ror	r16
     8ea:	16 95       	lsr	r17
     8ec:	07 95       	ror	r16
     8ee:	98 01       	movw	r18, r16
     8f0:	ab e7       	ldi	r26, 0x7B	; 123
     8f2:	b4 e1       	ldi	r27, 0x14	; 20
     8f4:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <__umulhisi3>
     8f8:	ac 01       	movw	r20, r24
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	0f 2e       	mov	r0, r31
     900:	f0 e3       	ldi	r31, 0x30	; 48
     902:	bf 2e       	mov	r11, r31
     904:	f0 2d       	mov	r31, r0
     906:	b4 0e       	add	r11, r20
		newchar2 = '0' + (speed  % 100) / 10;
     908:	24 e6       	ldi	r18, 0x64	; 100
     90a:	24 9f       	mul	r18, r20
     90c:	c0 01       	movw	r24, r0
     90e:	25 9f       	mul	r18, r21
     910:	90 0d       	add	r25, r0
     912:	11 24       	eor	r1, r1
     914:	9e 01       	movw	r18, r28
     916:	28 1b       	sub	r18, r24
     918:	39 0b       	sbc	r19, r25
     91a:	ad ec       	ldi	r26, 0xCD	; 205
     91c:	bc ec       	ldi	r27, 0xCC	; 204
     91e:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <__umulhisi3>
     922:	96 95       	lsr	r25
     924:	87 95       	ror	r24
     926:	96 95       	lsr	r25
     928:	87 95       	ror	r24
     92a:	96 95       	lsr	r25
     92c:	87 95       	ror	r24
     92e:	0f 2e       	mov	r0, r31
     930:	f0 e3       	ldi	r31, 0x30	; 48
     932:	df 2e       	mov	r13, r31
     934:	f0 2d       	mov	r31, r0
     936:	d8 0e       	add	r13, r24
	}
	if (old_speed == 65535) {
     938:	ef 3f       	cpi	r30, 0xFF	; 255
     93a:	8f ef       	ldi	r24, 0xFF	; 255
     93c:	f8 07       	cpc	r31, r24
     93e:	31 f4       	brne	.+12     	; 0x94c <__stack+0x4d>
		oldchar1 = ' ';
		oldchar2 = ' ';
     940:	68 94       	set
     942:	ff 24       	eor	r15, r15
     944:	f5 f8       	bld	r15, 5
		} else {
		newchar1 = '0' + (speed / 100);
		newchar2 = '0' + (speed  % 100) / 10;
	}
	if (old_speed == 65535) {
		oldchar1 = ' ';
     946:	68 94       	set
     948:	cc 24       	eor	r12, r12
     94a:	c5 f8       	bld	r12, 5
		oldchar2 = ' ';
	}
	if ((old_speed > 100) && (speed <+ 100)) {
     94c:	e5 36       	cpi	r30, 0x65	; 101
     94e:	f1 05       	cpc	r31, r1
     950:	d8 f0       	brcs	.+54     	; 0x988 <__stack+0x89>
     952:	c4 36       	cpi	r28, 0x64	; 100
     954:	d1 05       	cpc	r29, r1
     956:	c0 f4       	brcc	.+48     	; 0x988 <__stack+0x89>
		prepareCharUpdate(charUp, ' ', '.');
     958:	4e e2       	ldi	r20, 0x2E	; 46
     95a:	60 e2       	ldi	r22, 0x20	; 32
     95c:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <charUp>
     960:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <charUp+0x1>
     964:	0e 94 b5 01 	call	0x36a	; 0x36a <prepareCharUpdate>
		redrawChar(55, 19, charUp, BLACK, WHITE, 2);   
     968:	40 91 8a 03 	lds	r20, 0x038A	; 0x80038a <charUp>
     96c:	50 91 8b 03 	lds	r21, 0x038B	; 0x80038b <charUp+0x1>
     970:	68 94       	set
     972:	ee 24       	eor	r14, r14
     974:	e1 f8       	bld	r14, 1
     976:	0f ef       	ldi	r16, 0xFF	; 255
     978:	1f ef       	ldi	r17, 0xFF	; 255
     97a:	20 e0       	ldi	r18, 0x00	; 0
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	63 e1       	ldi	r22, 0x13	; 19
     980:	87 e3       	ldi	r24, 0x37	; 55
     982:	0e 94 10 02 	call	0x420	; 0x420 <redrawChar>
     986:	1d c0       	rjmp	.+58     	; 0x9c2 <__stack+0xc3>
	} else if ((old_speed < 100) && (speed >= 100)) {
     988:	e4 36       	cpi	r30, 0x64	; 100
     98a:	f1 05       	cpc	r31, r1
     98c:	d0 f4       	brcc	.+52     	; 0x9c2 <__stack+0xc3>
     98e:	c4 36       	cpi	r28, 0x64	; 100
     990:	d1 05       	cpc	r29, r1
     992:	b8 f0       	brcs	.+46     	; 0x9c2 <__stack+0xc3>
		prepareCharUpdate(charUp, '.', ' ');
     994:	40 e2       	ldi	r20, 0x20	; 32
     996:	6e e2       	ldi	r22, 0x2E	; 46
     998:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <charUp>
     99c:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <charUp+0x1>
     9a0:	0e 94 b5 01 	call	0x36a	; 0x36a <prepareCharUpdate>
		redrawChar(55, 19, charUp, BLACK, WHITE, 2);   
     9a4:	40 91 8a 03 	lds	r20, 0x038A	; 0x80038a <charUp>
     9a8:	50 91 8b 03 	lds	r21, 0x038B	; 0x80038b <charUp+0x1>
     9ac:	68 94       	set
     9ae:	ee 24       	eor	r14, r14
     9b0:	e1 f8       	bld	r14, 1
     9b2:	0f ef       	ldi	r16, 0xFF	; 255
     9b4:	1f ef       	ldi	r17, 0xFF	; 255
     9b6:	20 e0       	ldi	r18, 0x00	; 0
     9b8:	30 e0       	ldi	r19, 0x00	; 0
     9ba:	63 e1       	ldi	r22, 0x13	; 19
     9bc:	87 e3       	ldi	r24, 0x37	; 55
     9be:	0e 94 10 02 	call	0x420	; 0x420 <redrawChar>
	}
	
	
	prepareCharUpdate(charUp, oldchar1, newchar1);
     9c2:	4b 2d       	mov	r20, r11
     9c4:	6c 2d       	mov	r22, r12
     9c6:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <charUp>
     9ca:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <charUp+0x1>
     9ce:	0e 94 b5 01 	call	0x36a	; 0x36a <prepareCharUpdate>
	redrawChar(40, 11, charUp, BLACK, WHITE, 3);   
     9d2:	40 91 8a 03 	lds	r20, 0x038A	; 0x80038a <charUp>
     9d6:	50 91 8b 03 	lds	r21, 0x038B	; 0x80038b <charUp+0x1>
     9da:	0f 2e       	mov	r0, r31
     9dc:	f3 e0       	ldi	r31, 0x03	; 3
     9de:	ef 2e       	mov	r14, r31
     9e0:	f0 2d       	mov	r31, r0
     9e2:	0f ef       	ldi	r16, 0xFF	; 255
     9e4:	1f ef       	ldi	r17, 0xFF	; 255
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	6b e0       	ldi	r22, 0x0B	; 11
     9ec:	88 e2       	ldi	r24, 0x28	; 40
     9ee:	0e 94 10 02 	call	0x420	; 0x420 <redrawChar>
	prepareCharUpdate(charUp, oldchar2, newchar2);
     9f2:	4d 2d       	mov	r20, r13
     9f4:	6f 2d       	mov	r22, r15
     9f6:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <charUp>
     9fa:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <charUp+0x1>
     9fe:	0e 94 b5 01 	call	0x36a	; 0x36a <prepareCharUpdate>
	redrawChar(64, 11, charUp, BLACK, WHITE, 3);   
     a02:	40 91 8a 03 	lds	r20, 0x038A	; 0x80038a <charUp>
     a06:	50 91 8b 03 	lds	r21, 0x038B	; 0x80038b <charUp+0x1>
     a0a:	20 e0       	ldi	r18, 0x00	; 0
     a0c:	30 e0       	ldi	r19, 0x00	; 0
     a0e:	6b e0       	ldi	r22, 0x0B	; 11
     a10:	80 e4       	ldi	r24, 0x40	; 64
     a12:	0e 94 10 02 	call	0x420	; 0x420 <redrawChar>
	old_speed = speed;
     a16:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <speed>
     a1a:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <speed+0x1>
     a1e:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <old_speed+0x1>
     a22:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <old_speed>
	return;
}
     a26:	df 91       	pop	r29
     a28:	cf 91       	pop	r28
     a2a:	1f 91       	pop	r17
     a2c:	0f 91       	pop	r16
     a2e:	ff 90       	pop	r15
     a30:	ef 90       	pop	r14
     a32:	df 90       	pop	r13
     a34:	cf 90       	pop	r12
     a36:	bf 90       	pop	r11
     a38:	08 95       	ret

00000a3a <draw_time>:

void draw_time(void) {
     a3a:	ef 92       	push	r14
     a3c:	ff 92       	push	r15
     a3e:	0f 93       	push	r16
     a40:	1f 93       	push	r17
     a42:	cf 93       	push	r28
     a44:	df 93       	push	r29
	if (minute == 60) {
     a46:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <minute>
     a4a:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <minute+0x1>
     a4e:	cc 97       	sbiw	r24, 0x3c	; 60
     a50:	69 f4       	brne	.+26     	; 0xa6c <draw_time+0x32>
		minute = 0;
     a52:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <minute+0x1>
     a56:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <minute>
		hour++;
     a5a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <hour>
     a5e:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <hour+0x1>
     a62:	01 96       	adiw	r24, 0x01	; 1
     a64:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <hour+0x1>
     a68:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <hour>
	}
	
	hour = hour % 24;
     a6c:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <hour>
     a70:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <hour+0x1>
     a74:	9a 01       	movw	r18, r20
     a76:	ab ea       	ldi	r26, 0xAB	; 171
     a78:	ba ea       	ldi	r27, 0xAA	; 170
     a7a:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <__umulhisi3>
     a7e:	fc 01       	movw	r30, r24
     a80:	f2 95       	swap	r31
     a82:	e2 95       	swap	r30
     a84:	ef 70       	andi	r30, 0x0F	; 15
     a86:	ef 27       	eor	r30, r31
     a88:	ff 70       	andi	r31, 0x0F	; 15
     a8a:	ef 27       	eor	r30, r31
     a8c:	cf 01       	movw	r24, r30
     a8e:	88 0f       	add	r24, r24
     a90:	99 1f       	adc	r25, r25
     a92:	e8 0f       	add	r30, r24
     a94:	f9 1f       	adc	r31, r25
     a96:	ee 0f       	add	r30, r30
     a98:	ff 1f       	adc	r31, r31
     a9a:	ee 0f       	add	r30, r30
     a9c:	ff 1f       	adc	r31, r31
     a9e:	ee 0f       	add	r30, r30
     aa0:	ff 1f       	adc	r31, r31
     aa2:	ca 01       	movw	r24, r20
     aa4:	8e 1b       	sub	r24, r30
     aa6:	9f 0b       	sbc	r25, r31
     aa8:	fc 01       	movw	r30, r24
     aaa:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <hour+0x1>
     aae:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <hour>
	char oldchar1;
	char oldchar2;
	char newchar1;
	char newchar2;

	oldchar1 = '0' + (old_hour / 10);
     ab2:	00 91 0c 01 	lds	r16, 0x010C	; 0x80010c <old_hour>
     ab6:	10 91 0d 01 	lds	r17, 0x010D	; 0x80010d <old_hour+0x1>
     aba:	98 01       	movw	r18, r16
     abc:	ad ec       	ldi	r26, 0xCD	; 205
     abe:	bc ec       	ldi	r27, 0xCC	; 204
     ac0:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <__umulhisi3>
     ac4:	ac 01       	movw	r20, r24
     ac6:	56 95       	lsr	r21
     ac8:	47 95       	ror	r20
     aca:	56 95       	lsr	r21
     acc:	47 95       	ror	r20
     ace:	56 95       	lsr	r21
     ad0:	47 95       	ror	r20
     ad2:	0f 2e       	mov	r0, r31
     ad4:	f0 e3       	ldi	r31, 0x30	; 48
     ad6:	ef 2e       	mov	r14, r31
     ad8:	f0 2d       	mov	r31, r0
     ada:	e4 0e       	add	r14, r20
	oldchar2= '0' + (old_hour  % 10);
     adc:	ca 01       	movw	r24, r20
     ade:	88 0f       	add	r24, r24
     ae0:	99 1f       	adc	r25, r25
     ae2:	44 0f       	add	r20, r20
     ae4:	55 1f       	adc	r21, r21
     ae6:	44 0f       	add	r20, r20
     ae8:	55 1f       	adc	r21, r21
     aea:	44 0f       	add	r20, r20
     aec:	55 1f       	adc	r21, r21
     aee:	48 0f       	add	r20, r24
     af0:	59 1f       	adc	r21, r25
     af2:	c8 01       	movw	r24, r16
     af4:	84 1b       	sub	r24, r20
     af6:	95 0b       	sbc	r25, r21
     af8:	0f 2e       	mov	r0, r31
     afa:	f0 e3       	ldi	r31, 0x30	; 48
     afc:	ff 2e       	mov	r15, r31
     afe:	f0 2d       	mov	r31, r0
     b00:	f8 0e       	add	r15, r24
	newchar1 = '0' + (hour / 10);
     b02:	9f 01       	movw	r18, r30
     b04:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <__umulhisi3>
     b08:	ec 01       	movw	r28, r24
     b0a:	d6 95       	lsr	r29
     b0c:	c7 95       	ror	r28
     b0e:	d6 95       	lsr	r29
     b10:	c7 95       	ror	r28
     b12:	d6 95       	lsr	r29
     b14:	c7 95       	ror	r28
     b16:	4c 2f       	mov	r20, r28
     b18:	40 5d       	subi	r20, 0xD0	; 208
	newchar2 = '0' + (hour  % 10);
     b1a:	ce 01       	movw	r24, r28
     b1c:	88 0f       	add	r24, r24
     b1e:	99 1f       	adc	r25, r25
     b20:	cc 0f       	add	r28, r28
     b22:	dd 1f       	adc	r29, r29
     b24:	cc 0f       	add	r28, r28
     b26:	dd 1f       	adc	r29, r29
     b28:	cc 0f       	add	r28, r28
     b2a:	dd 1f       	adc	r29, r29
     b2c:	c8 0f       	add	r28, r24
     b2e:	d9 1f       	adc	r29, r25
     b30:	ec 1b       	sub	r30, r28
     b32:	fd 0b       	sbc	r31, r29
     b34:	c0 e3       	ldi	r28, 0x30	; 48
     b36:	ce 0f       	add	r28, r30

	
	if (old_hour == 65535) {
     b38:	0f 3f       	cpi	r16, 0xFF	; 255
     b3a:	1f 4f       	sbci	r17, 0xFF	; 255
     b3c:	31 f4       	brne	.+12     	; 0xb4a <draw_time+0x110>
		oldchar1 = ' ';
		oldchar2 = ' ';
     b3e:	68 94       	set
     b40:	ff 24       	eor	r15, r15
     b42:	f5 f8       	bld	r15, 5
	newchar1 = '0' + (hour / 10);
	newchar2 = '0' + (hour  % 10);

	
	if (old_hour == 65535) {
		oldchar1 = ' ';
     b44:	68 94       	set
     b46:	ee 24       	eor	r14, r14
     b48:	e5 f8       	bld	r14, 5
		oldchar2 = ' ';
	}
	prepareCharUpdate(charUp, oldchar1, newchar1);
     b4a:	6e 2d       	mov	r22, r14
     b4c:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <charUp>
     b50:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <charUp+0x1>
     b54:	0e 94 b5 01 	call	0x36a	; 0x36a <prepareCharUpdate>
	redrawChar(8, 105, charUp, BLACK, WHITE, 2);   
     b58:	40 91 8a 03 	lds	r20, 0x038A	; 0x80038a <charUp>
     b5c:	50 91 8b 03 	lds	r21, 0x038B	; 0x80038b <charUp+0x1>
     b60:	68 94       	set
     b62:	ee 24       	eor	r14, r14
     b64:	e1 f8       	bld	r14, 1
     b66:	0f ef       	ldi	r16, 0xFF	; 255
     b68:	1f ef       	ldi	r17, 0xFF	; 255
     b6a:	20 e0       	ldi	r18, 0x00	; 0
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	69 e6       	ldi	r22, 0x69	; 105
     b70:	88 e0       	ldi	r24, 0x08	; 8
     b72:	0e 94 10 02 	call	0x420	; 0x420 <redrawChar>
	prepareCharUpdate(charUp, oldchar2, newchar2);
     b76:	4c 2f       	mov	r20, r28
     b78:	6f 2d       	mov	r22, r15
     b7a:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <charUp>
     b7e:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <charUp+0x1>
     b82:	0e 94 b5 01 	call	0x36a	; 0x36a <prepareCharUpdate>
	redrawChar(20, 105, charUp, BLACK, WHITE, 2);
     b86:	40 91 8a 03 	lds	r20, 0x038A	; 0x80038a <charUp>
     b8a:	50 91 8b 03 	lds	r21, 0x038B	; 0x80038b <charUp+0x1>
     b8e:	20 e0       	ldi	r18, 0x00	; 0
     b90:	30 e0       	ldi	r19, 0x00	; 0
     b92:	69 e6       	ldi	r22, 0x69	; 105
     b94:	84 e1       	ldi	r24, 0x14	; 20
     b96:	0e 94 10 02 	call	0x420	; 0x420 <redrawChar>
	

	oldchar1 = '0' + (old_minute / 10);
     b9a:	00 91 08 01 	lds	r16, 0x0108	; 0x800108 <old_minute>
     b9e:	10 91 09 01 	lds	r17, 0x0109	; 0x800109 <old_minute+0x1>
     ba2:	98 01       	movw	r18, r16
     ba4:	ad ec       	ldi	r26, 0xCD	; 205
     ba6:	bc ec       	ldi	r27, 0xCC	; 204
     ba8:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <__umulhisi3>
     bac:	ac 01       	movw	r20, r24
     bae:	56 95       	lsr	r21
     bb0:	47 95       	ror	r20
     bb2:	56 95       	lsr	r21
     bb4:	47 95       	ror	r20
     bb6:	56 95       	lsr	r21
     bb8:	47 95       	ror	r20
     bba:	0f 2e       	mov	r0, r31
     bbc:	f0 e3       	ldi	r31, 0x30	; 48
     bbe:	ef 2e       	mov	r14, r31
     bc0:	f0 2d       	mov	r31, r0
     bc2:	e4 0e       	add	r14, r20
	oldchar2= '0' + (old_minute  % 10);
     bc4:	ca 01       	movw	r24, r20
     bc6:	88 0f       	add	r24, r24
     bc8:	99 1f       	adc	r25, r25
     bca:	44 0f       	add	r20, r20
     bcc:	55 1f       	adc	r21, r21
     bce:	44 0f       	add	r20, r20
     bd0:	55 1f       	adc	r21, r21
     bd2:	44 0f       	add	r20, r20
     bd4:	55 1f       	adc	r21, r21
     bd6:	48 0f       	add	r20, r24
     bd8:	59 1f       	adc	r21, r25
     bda:	c8 01       	movw	r24, r16
     bdc:	84 1b       	sub	r24, r20
     bde:	95 0b       	sbc	r25, r21
     be0:	0f 2e       	mov	r0, r31
     be2:	f0 e3       	ldi	r31, 0x30	; 48
     be4:	ff 2e       	mov	r15, r31
     be6:	f0 2d       	mov	r31, r0
     be8:	f8 0e       	add	r15, r24
	newchar1 = '0' + (minute / 10);
     bea:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <minute>
     bee:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <minute+0x1>
     bf2:	9f 01       	movw	r18, r30
     bf4:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <__umulhisi3>
     bf8:	ec 01       	movw	r28, r24
     bfa:	d6 95       	lsr	r29
     bfc:	c7 95       	ror	r28
     bfe:	d6 95       	lsr	r29
     c00:	c7 95       	ror	r28
     c02:	d6 95       	lsr	r29
     c04:	c7 95       	ror	r28
     c06:	4c 2f       	mov	r20, r28
     c08:	40 5d       	subi	r20, 0xD0	; 208
	newchar2 = '0' + (minute  % 10);
     c0a:	ce 01       	movw	r24, r28
     c0c:	88 0f       	add	r24, r24
     c0e:	99 1f       	adc	r25, r25
     c10:	cc 0f       	add	r28, r28
     c12:	dd 1f       	adc	r29, r29
     c14:	cc 0f       	add	r28, r28
     c16:	dd 1f       	adc	r29, r29
     c18:	cc 0f       	add	r28, r28
     c1a:	dd 1f       	adc	r29, r29
     c1c:	c8 0f       	add	r28, r24
     c1e:	d9 1f       	adc	r29, r25
     c20:	ec 1b       	sub	r30, r28
     c22:	fd 0b       	sbc	r31, r29
     c24:	c0 e3       	ldi	r28, 0x30	; 48
     c26:	ce 0f       	add	r28, r30

		
	if (old_minute == 65535) {
     c28:	0f 3f       	cpi	r16, 0xFF	; 255
     c2a:	1f 4f       	sbci	r17, 0xFF	; 255
     c2c:	31 f4       	brne	.+12     	; 0xc3a <draw_time+0x200>
		oldchar1 = ' ';
		oldchar2 = ' ';
     c2e:	68 94       	set
     c30:	ff 24       	eor	r15, r15
     c32:	f5 f8       	bld	r15, 5
	newchar1 = '0' + (minute / 10);
	newchar2 = '0' + (minute  % 10);

		
	if (old_minute == 65535) {
		oldchar1 = ' ';
     c34:	68 94       	set
     c36:	ee 24       	eor	r14, r14
     c38:	e5 f8       	bld	r14, 5
		oldchar2 = ' ';
	}
	prepareCharUpdate(charUp, oldchar1, newchar1);
     c3a:	6e 2d       	mov	r22, r14
     c3c:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <charUp>
     c40:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <charUp+0x1>
     c44:	0e 94 b5 01 	call	0x36a	; 0x36a <prepareCharUpdate>
	redrawChar(42, 105, charUp, BLACK, WHITE, 2);   
     c48:	40 91 8a 03 	lds	r20, 0x038A	; 0x80038a <charUp>
     c4c:	50 91 8b 03 	lds	r21, 0x038B	; 0x80038b <charUp+0x1>
     c50:	68 94       	set
     c52:	ee 24       	eor	r14, r14
     c54:	e1 f8       	bld	r14, 1
     c56:	0f ef       	ldi	r16, 0xFF	; 255
     c58:	1f ef       	ldi	r17, 0xFF	; 255
     c5a:	20 e0       	ldi	r18, 0x00	; 0
     c5c:	30 e0       	ldi	r19, 0x00	; 0
     c5e:	69 e6       	ldi	r22, 0x69	; 105
     c60:	8a e2       	ldi	r24, 0x2A	; 42
     c62:	0e 94 10 02 	call	0x420	; 0x420 <redrawChar>
	prepareCharUpdate(charUp, oldchar2, newchar2);
     c66:	4c 2f       	mov	r20, r28
     c68:	6f 2d       	mov	r22, r15
     c6a:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <charUp>
     c6e:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <charUp+0x1>
     c72:	0e 94 b5 01 	call	0x36a	; 0x36a <prepareCharUpdate>
	redrawChar(54, 105, charUp, BLACK, WHITE, 2);   
     c76:	40 91 8a 03 	lds	r20, 0x038A	; 0x80038a <charUp>
     c7a:	50 91 8b 03 	lds	r21, 0x038B	; 0x80038b <charUp+0x1>
     c7e:	20 e0       	ldi	r18, 0x00	; 0
     c80:	30 e0       	ldi	r19, 0x00	; 0
     c82:	69 e6       	ldi	r22, 0x69	; 105
     c84:	86 e3       	ldi	r24, 0x36	; 54
     c86:	0e 94 10 02 	call	0x420	; 0x420 <redrawChar>
	old_hour = hour;
     c8a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <hour>
     c8e:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <hour+0x1>
     c92:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <old_hour+0x1>
     c96:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <old_hour>
	old_minute = minute;
     c9a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <minute>
     c9e:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <minute+0x1>
     ca2:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <old_minute+0x1>
     ca6:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <old_minute>
	return;
}
     caa:	df 91       	pop	r29
     cac:	cf 91       	pop	r28
     cae:	1f 91       	pop	r17
     cb0:	0f 91       	pop	r16
     cb2:	ff 90       	pop	r15
     cb4:	ef 90       	pop	r14
     cb6:	08 95       	ret

00000cb8 <__vector_4>:


ISR(PCINT1_vect) {
     cb8:	1f 92       	push	r1
     cba:	0f 92       	push	r0
     cbc:	0f b6       	in	r0, 0x3f	; 63
     cbe:	0f 92       	push	r0
     cc0:	11 24       	eor	r1, r1
     cc2:	ef 92       	push	r14
     cc4:	0f 93       	push	r16
     cc6:	1f 93       	push	r17
     cc8:	2f 93       	push	r18
     cca:	3f 93       	push	r19
     ccc:	4f 93       	push	r20
     cce:	5f 93       	push	r21
     cd0:	6f 93       	push	r22
     cd2:	7f 93       	push	r23
     cd4:	8f 93       	push	r24
     cd6:	9f 93       	push	r25
     cd8:	af 93       	push	r26
     cda:	bf 93       	push	r27
     cdc:	ef 93       	push	r30
     cde:	ff 93       	push	r31
	PORTB ^= (1 << PORTB5);
     ce0:	95 b1       	in	r25, 0x05	; 5
     ce2:	80 e2       	ldi	r24, 0x20	; 32
     ce4:	89 27       	eor	r24, r25
     ce6:	85 b9       	out	0x05, r24	; 5
	
	if (PINC & (1 << PINC2)) {
     ce8:	32 9b       	sbis	0x06, 2	; 6
     cea:	2a c0       	rjmp	.+84     	; 0xd40 <__vector_4+0x88>
		prepareCharUpdate(charUp, 'O', 'L');
     cec:	4c e4       	ldi	r20, 0x4C	; 76
     cee:	6f e4       	ldi	r22, 0x4F	; 79
     cf0:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <charUp>
     cf4:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <charUp+0x1>
     cf8:	0e 94 b5 01 	call	0x36a	; 0x36a <prepareCharUpdate>
		redrawChar(129, 105, charUp, BLACK, WHITE, 2);
     cfc:	40 91 8a 03 	lds	r20, 0x038A	; 0x80038a <charUp>
     d00:	50 91 8b 03 	lds	r21, 0x038B	; 0x80038b <charUp+0x1>
     d04:	68 94       	set
     d06:	ee 24       	eor	r14, r14
     d08:	e1 f8       	bld	r14, 1
     d0a:	0f ef       	ldi	r16, 0xFF	; 255
     d0c:	1f ef       	ldi	r17, 0xFF	; 255
     d0e:	20 e0       	ldi	r18, 0x00	; 0
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	69 e6       	ldi	r22, 0x69	; 105
     d14:	81 e8       	ldi	r24, 0x81	; 129
     d16:	0e 94 10 02 	call	0x420	; 0x420 <redrawChar>
		prepareCharUpdate(charUp, 'K', 'O');
     d1a:	4f e4       	ldi	r20, 0x4F	; 79
     d1c:	6b e4       	ldi	r22, 0x4B	; 75
     d1e:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <charUp>
     d22:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <charUp+0x1>
     d26:	0e 94 b5 01 	call	0x36a	; 0x36a <prepareCharUpdate>
		redrawChar(141, 105, charUp, BLACK, WHITE, 2);
     d2a:	40 91 8a 03 	lds	r20, 0x038A	; 0x80038a <charUp>
     d2e:	50 91 8b 03 	lds	r21, 0x038B	; 0x80038b <charUp+0x1>
     d32:	20 e0       	ldi	r18, 0x00	; 0
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	69 e6       	ldi	r22, 0x69	; 105
     d38:	8d e8       	ldi	r24, 0x8D	; 141
     d3a:	0e 94 10 02 	call	0x420	; 0x420 <redrawChar>
     d3e:	29 c0       	rjmp	.+82     	; 0xd92 <__vector_4+0xda>
	} else {
		prepareCharUpdate(charUp, 'L', 'O');
     d40:	4f e4       	ldi	r20, 0x4F	; 79
     d42:	6c e4       	ldi	r22, 0x4C	; 76
     d44:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <charUp>
     d48:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <charUp+0x1>
     d4c:	0e 94 b5 01 	call	0x36a	; 0x36a <prepareCharUpdate>
		redrawChar(129, 105, charUp, BLACK, WHITE, 2);
     d50:	40 91 8a 03 	lds	r20, 0x038A	; 0x80038a <charUp>
     d54:	50 91 8b 03 	lds	r21, 0x038B	; 0x80038b <charUp+0x1>
     d58:	68 94       	set
     d5a:	ee 24       	eor	r14, r14
     d5c:	e1 f8       	bld	r14, 1
     d5e:	0f ef       	ldi	r16, 0xFF	; 255
     d60:	1f ef       	ldi	r17, 0xFF	; 255
     d62:	20 e0       	ldi	r18, 0x00	; 0
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	69 e6       	ldi	r22, 0x69	; 105
     d68:	81 e8       	ldi	r24, 0x81	; 129
     d6a:	0e 94 10 02 	call	0x420	; 0x420 <redrawChar>
		prepareCharUpdate(charUp, 'O', 'K');
     d6e:	4b e4       	ldi	r20, 0x4B	; 75
     d70:	6f e4       	ldi	r22, 0x4F	; 79
     d72:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <charUp>
     d76:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <charUp+0x1>
     d7a:	0e 94 b5 01 	call	0x36a	; 0x36a <prepareCharUpdate>
		redrawChar(141, 105, charUp, BLACK, WHITE, 2);
     d7e:	40 91 8a 03 	lds	r20, 0x038A	; 0x80038a <charUp>
     d82:	50 91 8b 03 	lds	r21, 0x038B	; 0x80038b <charUp+0x1>
     d86:	20 e0       	ldi	r18, 0x00	; 0
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	69 e6       	ldi	r22, 0x69	; 105
     d8c:	8d e8       	ldi	r24, 0x8D	; 141
     d8e:	0e 94 10 02 	call	0x420	; 0x420 <redrawChar>
	}
}
     d92:	ff 91       	pop	r31
     d94:	ef 91       	pop	r30
     d96:	bf 91       	pop	r27
     d98:	af 91       	pop	r26
     d9a:	9f 91       	pop	r25
     d9c:	8f 91       	pop	r24
     d9e:	7f 91       	pop	r23
     da0:	6f 91       	pop	r22
     da2:	5f 91       	pop	r21
     da4:	4f 91       	pop	r20
     da6:	3f 91       	pop	r19
     da8:	2f 91       	pop	r18
     daa:	1f 91       	pop	r17
     dac:	0f 91       	pop	r16
     dae:	ef 90       	pop	r14
     db0:	0f 90       	pop	r0
     db2:	0f be       	out	0x3f, r0	; 63
     db4:	0f 90       	pop	r0
     db6:	1f 90       	pop	r1
     db8:	18 95       	reti

00000dba <main>:



int main(void)
{
     dba:	cf 93       	push	r28
     dbc:	df 93       	push	r29
     dbe:	00 d0       	rcall	.+0      	; 0xdc0 <main+0x6>
     dc0:	1f 92       	push	r1
     dc2:	cd b7       	in	r28, 0x3d	; 61
     dc4:	de b7       	in	r29, 0x3e	; 62
	Initialize();
     dc6:	0e 94 a5 03 	call	0x74a	; 0x74a <Initialize>
	
	
	LCD_drawBlock(1, 1, 158, 127, WHITE);
     dca:	0f ef       	ldi	r16, 0xFF	; 255
     dcc:	1f ef       	ldi	r17, 0xFF	; 255
     dce:	2f e7       	ldi	r18, 0x7F	; 127
     dd0:	4e e9       	ldi	r20, 0x9E	; 158
     dd2:	61 e0       	ldi	r22, 0x01	; 1
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	0e 94 50 01 	call	0x2a0	; 0x2a0 <LCD_drawBlock>
	LCD_drawBlock(11, 6, 148, 36, BLACK);
     dda:	00 e0       	ldi	r16, 0x00	; 0
     ddc:	10 e0       	ldi	r17, 0x00	; 0
     dde:	24 e2       	ldi	r18, 0x24	; 36
     de0:	44 e9       	ldi	r20, 0x94	; 148
     de2:	66 e0       	ldi	r22, 0x06	; 6
     de4:	8b e0       	ldi	r24, 0x0B	; 11
     de6:	0e 94 50 01 	call	0x2a0	; 0x2a0 <LCD_drawBlock>
	LCD_drawBlock(12, 7, 147, 35, WHITE);
     dea:	0f ef       	ldi	r16, 0xFF	; 255
     dec:	1f ef       	ldi	r17, 0xFF	; 255
     dee:	23 e2       	ldi	r18, 0x23	; 35
     df0:	43 e9       	ldi	r20, 0x93	; 147
     df2:	67 e0       	ldi	r22, 0x07	; 7
     df4:	8c e0       	ldi	r24, 0x0C	; 12
     df6:	0e 94 50 01 	call	0x2a0	; 0x2a0 <LCD_drawBlock>

	LCD_drawBlock(6, 102, 70, 122, BLACK);
     dfa:	00 e0       	ldi	r16, 0x00	; 0
     dfc:	10 e0       	ldi	r17, 0x00	; 0
     dfe:	2a e7       	ldi	r18, 0x7A	; 122
     e00:	46 e4       	ldi	r20, 0x46	; 70
     e02:	66 e6       	ldi	r22, 0x66	; 102
     e04:	86 e0       	ldi	r24, 0x06	; 6
     e06:	0e 94 50 01 	call	0x2a0	; 0x2a0 <LCD_drawBlock>
	LCD_drawBlock(7, 103, 69, 121, WHITE);
     e0a:	0f ef       	ldi	r16, 0xFF	; 255
     e0c:	1f ef       	ldi	r17, 0xFF	; 255
     e0e:	29 e7       	ldi	r18, 0x79	; 121
     e10:	45 e4       	ldi	r20, 0x45	; 69
     e12:	67 e6       	ldi	r22, 0x67	; 103
     e14:	87 e0       	ldi	r24, 0x07	; 7
     e16:	0e 94 50 01 	call	0x2a0	; 0x2a0 <LCD_drawBlock>
	
	LCD_drawBlock(89, 102, 153, 122, BLACK);
     e1a:	00 e0       	ldi	r16, 0x00	; 0
     e1c:	10 e0       	ldi	r17, 0x00	; 0
     e1e:	2a e7       	ldi	r18, 0x7A	; 122
     e20:	49 e9       	ldi	r20, 0x99	; 153
     e22:	66 e6       	ldi	r22, 0x66	; 102
     e24:	89 e5       	ldi	r24, 0x59	; 89
     e26:	0e 94 50 01 	call	0x2a0	; 0x2a0 <LCD_drawBlock>
	LCD_drawBlock(90, 103, 152, 121, WHITE);
     e2a:	0f ef       	ldi	r16, 0xFF	; 255
     e2c:	1f ef       	ldi	r17, 0xFF	; 255
     e2e:	29 e7       	ldi	r18, 0x79	; 121
     e30:	48 e9       	ldi	r20, 0x98	; 152
     e32:	67 e6       	ldi	r22, 0x67	; 103
     e34:	8a e5       	ldi	r24, 0x5A	; 90
     e36:	0e 94 50 01 	call	0x2a0	; 0x2a0 <LCD_drawBlock>

	

	char buf[3] = ".";
     e3a:	8e e2       	ldi	r24, 0x2E	; 46
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	9a 83       	std	Y+2, r25	; 0x02
     e40:	89 83       	std	Y+1, r24	; 0x01
     e42:	1b 82       	std	Y+3, r1	; 0x03
	LCD_drawString(55, 19, buf, BLACK, WHITE, 2);
     e44:	68 94       	set
     e46:	ee 24       	eor	r14, r14
     e48:	e1 f8       	bld	r14, 1
     e4a:	f1 2c       	mov	r15, r1
     e4c:	20 e0       	ldi	r18, 0x00	; 0
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	ae 01       	movw	r20, r28
     e52:	4f 5f       	subi	r20, 0xFF	; 255
     e54:	5f 4f       	sbci	r21, 0xFF	; 255
     e56:	63 e1       	ldi	r22, 0x13	; 19
     e58:	87 e3       	ldi	r24, 0x37	; 55
     e5a:	0e 94 84 02 	call	0x508	; 0x508 <LCD_drawString>
	sprintf(buf, "mph/s");
     e5e:	86 e0       	ldi	r24, 0x06	; 6
     e60:	e9 e7       	ldi	r30, 0x79	; 121
     e62:	f3 e0       	ldi	r31, 0x03	; 3
     e64:	de 01       	movw	r26, r28
     e66:	11 96       	adiw	r26, 0x01	; 1
     e68:	01 90       	ld	r0, Z+
     e6a:	0d 92       	st	X+, r0
     e6c:	8a 95       	dec	r24
     e6e:	e1 f7       	brne	.-8      	; 0xe68 <main+0xae>
	LCD_drawString(85, 19, buf, BLACK, WHITE, 2);
     e70:	20 e0       	ldi	r18, 0x00	; 0
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	ae 01       	movw	r20, r28
     e76:	4f 5f       	subi	r20, 0xFF	; 255
     e78:	5f 4f       	sbci	r21, 0xFF	; 255
     e7a:	63 e1       	ldi	r22, 0x13	; 19
     e7c:	85 e5       	ldi	r24, 0x55	; 85
     e7e:	0e 94 84 02 	call	0x508	; 0x508 <LCD_drawString>
	LCD_drawBigChar(32, 105, ':', BLACK, WHITE, 2);
     e82:	20 e0       	ldi	r18, 0x00	; 0
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	4a e3       	ldi	r20, 0x3A	; 58
     e88:	50 e0       	ldi	r21, 0x00	; 0
     e8a:	69 e6       	ldi	r22, 0x69	; 105
     e8c:	70 e0       	ldi	r23, 0x00	; 0
     e8e:	80 e2       	ldi	r24, 0x20	; 32
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	0e 94 86 00 	call	0x10c	; 0x10c <LCD_drawBigChar>
		
	charUp = malloc(sizeof(CharUpdate));
     e96:	80 e5       	ldi	r24, 0x50	; 80
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	0e 94 8f 0b 	call	0x171e	; 0x171e <malloc>
     e9e:	90 93 8b 03 	sts	0x038B, r25	; 0x80038b <charUp+0x1>
     ea2:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <charUp>
	prepareCharUpdate(charUp, ' ', '.');
     ea6:	4e e2       	ldi	r20, 0x2E	; 46
     ea8:	60 e2       	ldi	r22, 0x20	; 32
     eaa:	0e 94 b5 01 	call	0x36a	; 0x36a <prepareCharUpdate>
	redrawChar(55, 19, charUp, BLACK, WHITE, 2);   
     eae:	40 91 8a 03 	lds	r20, 0x038A	; 0x80038a <charUp>
     eb2:	50 91 8b 03 	lds	r21, 0x038B	; 0x80038b <charUp+0x1>
     eb6:	20 e0       	ldi	r18, 0x00	; 0
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	63 e1       	ldi	r22, 0x13	; 19
     ebc:	87 e3       	ldi	r24, 0x37	; 55
     ebe:	0e 94 10 02 	call	0x420	; 0x420 <redrawChar>
	
	prepareCharUpdate(charUp, ' ', 'B');
     ec2:	42 e4       	ldi	r20, 0x42	; 66
     ec4:	60 e2       	ldi	r22, 0x20	; 32
     ec6:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <charUp>
     eca:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <charUp+0x1>
     ece:	0e 94 b5 01 	call	0x36a	; 0x36a <prepareCharUpdate>
	redrawChar(91, 105, charUp, BLACK, WHITE, 2);   
     ed2:	40 91 8a 03 	lds	r20, 0x038A	; 0x80038a <charUp>
     ed6:	50 91 8b 03 	lds	r21, 0x038B	; 0x80038b <charUp+0x1>
     eda:	20 e0       	ldi	r18, 0x00	; 0
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	69 e6       	ldi	r22, 0x69	; 105
     ee0:	8b e5       	ldi	r24, 0x5B	; 91
     ee2:	0e 94 10 02 	call	0x420	; 0x420 <redrawChar>
	prepareCharUpdate(charUp, ' ', 'A');
     ee6:	41 e4       	ldi	r20, 0x41	; 65
     ee8:	60 e2       	ldi	r22, 0x20	; 32
     eea:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <charUp>
     eee:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <charUp+0x1>
     ef2:	0e 94 b5 01 	call	0x36a	; 0x36a <prepareCharUpdate>
	redrawChar(103, 105, charUp, BLACK, WHITE, 2);   
     ef6:	40 91 8a 03 	lds	r20, 0x038A	; 0x80038a <charUp>
     efa:	50 91 8b 03 	lds	r21, 0x038B	; 0x80038b <charUp+0x1>
     efe:	20 e0       	ldi	r18, 0x00	; 0
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	69 e6       	ldi	r22, 0x69	; 105
     f04:	87 e6       	ldi	r24, 0x67	; 103
     f06:	0e 94 10 02 	call	0x420	; 0x420 <redrawChar>
	prepareCharUpdate(charUp, ' ', 'T');
     f0a:	44 e5       	ldi	r20, 0x54	; 84
     f0c:	60 e2       	ldi	r22, 0x20	; 32
     f0e:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <charUp>
     f12:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <charUp+0x1>
     f16:	0e 94 b5 01 	call	0x36a	; 0x36a <prepareCharUpdate>
	redrawChar(115, 105, charUp, BLACK, WHITE, 2);   
     f1a:	40 91 8a 03 	lds	r20, 0x038A	; 0x80038a <charUp>
     f1e:	50 91 8b 03 	lds	r21, 0x038B	; 0x80038b <charUp+0x1>
     f22:	20 e0       	ldi	r18, 0x00	; 0
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	69 e6       	ldi	r22, 0x69	; 105
     f28:	83 e7       	ldi	r24, 0x73	; 115
     f2a:	0e 94 10 02 	call	0x420	; 0x420 <redrawChar>
	
	// set to OK or LO based on value read from pin.
	
	if (PINC & (1 << PINC2)) {
     f2e:	32 9b       	sbis	0x06, 2	; 6
     f30:	25 c0       	rjmp	.+74     	; 0xf7c <main+0x1c2>
		prepareCharUpdate(charUp, ' ', 'L');
     f32:	4c e4       	ldi	r20, 0x4C	; 76
     f34:	60 e2       	ldi	r22, 0x20	; 32
     f36:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <charUp>
     f3a:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <charUp+0x1>
     f3e:	0e 94 b5 01 	call	0x36a	; 0x36a <prepareCharUpdate>
		redrawChar(129, 105, charUp, BLACK, WHITE, 2);
     f42:	40 91 8a 03 	lds	r20, 0x038A	; 0x80038a <charUp>
     f46:	50 91 8b 03 	lds	r21, 0x038B	; 0x80038b <charUp+0x1>
     f4a:	20 e0       	ldi	r18, 0x00	; 0
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	69 e6       	ldi	r22, 0x69	; 105
     f50:	81 e8       	ldi	r24, 0x81	; 129
     f52:	0e 94 10 02 	call	0x420	; 0x420 <redrawChar>
		prepareCharUpdate(charUp, ' ', 'O');
     f56:	4f e4       	ldi	r20, 0x4F	; 79
     f58:	60 e2       	ldi	r22, 0x20	; 32
     f5a:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <charUp>
     f5e:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <charUp+0x1>
     f62:	0e 94 b5 01 	call	0x36a	; 0x36a <prepareCharUpdate>
		redrawChar(141, 105, charUp, BLACK, WHITE, 2);
     f66:	40 91 8a 03 	lds	r20, 0x038A	; 0x80038a <charUp>
     f6a:	50 91 8b 03 	lds	r21, 0x038B	; 0x80038b <charUp+0x1>
     f6e:	20 e0       	ldi	r18, 0x00	; 0
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	69 e6       	ldi	r22, 0x69	; 105
     f74:	8d e8       	ldi	r24, 0x8D	; 141
     f76:	0e 94 10 02 	call	0x420	; 0x420 <redrawChar>
     f7a:	29 c0       	rjmp	.+82     	; 0xfce <main+0x214>
	} else {
		prepareCharUpdate(charUp, ' ', 'O');
     f7c:	4f e4       	ldi	r20, 0x4F	; 79
     f7e:	60 e2       	ldi	r22, 0x20	; 32
     f80:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <charUp>
     f84:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <charUp+0x1>
     f88:	0e 94 b5 01 	call	0x36a	; 0x36a <prepareCharUpdate>
		redrawChar(129, 105, charUp, BLACK, WHITE, 2);
     f8c:	40 91 8a 03 	lds	r20, 0x038A	; 0x80038a <charUp>
     f90:	50 91 8b 03 	lds	r21, 0x038B	; 0x80038b <charUp+0x1>
     f94:	68 94       	set
     f96:	ee 24       	eor	r14, r14
     f98:	e1 f8       	bld	r14, 1
     f9a:	0f ef       	ldi	r16, 0xFF	; 255
     f9c:	1f ef       	ldi	r17, 0xFF	; 255
     f9e:	20 e0       	ldi	r18, 0x00	; 0
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	69 e6       	ldi	r22, 0x69	; 105
     fa4:	81 e8       	ldi	r24, 0x81	; 129
     fa6:	0e 94 10 02 	call	0x420	; 0x420 <redrawChar>
		prepareCharUpdate(charUp, ' ', 'K');
     faa:	4b e4       	ldi	r20, 0x4B	; 75
     fac:	60 e2       	ldi	r22, 0x20	; 32
     fae:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <charUp>
     fb2:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <charUp+0x1>
     fb6:	0e 94 b5 01 	call	0x36a	; 0x36a <prepareCharUpdate>
		redrawChar(141, 105, charUp, BLACK, WHITE, 2);
     fba:	40 91 8a 03 	lds	r20, 0x038A	; 0x80038a <charUp>
     fbe:	50 91 8b 03 	lds	r21, 0x038B	; 0x80038b <charUp+0x1>
     fc2:	20 e0       	ldi	r18, 0x00	; 0
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	69 e6       	ldi	r22, 0x69	; 105
     fc8:	8d e8       	ldi	r24, 0x8D	; 141
     fca:	0e 94 10 02 	call	0x420	; 0x420 <redrawChar>
	}

	DDRC &= ~(1 << DDRC4);
     fce:	87 b1       	in	r24, 0x07	; 7
     fd0:	8f 7e       	andi	r24, 0xEF	; 239
     fd2:	87 b9       	out	0x07, r24	; 7
    while (1) {
		
		GET_ACC();
     fd4:	0e 94 0e 03 	call	0x61c	; 0x61c <GET_ACC>
     fd8:	8f e1       	ldi	r24, 0x1F	; 31
     fda:	9e e4       	ldi	r25, 0x4E	; 78
     fdc:	01 97       	sbiw	r24, 0x01	; 1
     fde:	f1 f7       	brne	.-4      	; 0xfdc <main+0x222>
     fe0:	00 c0       	rjmp	.+0      	; 0xfe2 <main+0x228>
     fe2:	00 00       	nop
		_delay_ms(5);
		
		if (accValH > 128 && accValH < 256 - 6){
     fe4:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <accValH>
     fe8:	81 38       	cpi	r24, 0x81	; 129
     fea:	70 f0       	brcs	.+28     	; 0x1008 <main+0x24e>
     fec:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <accValH>
     ff0:	8a 3f       	cpi	r24, 0xFA	; 250
     ff2:	50 f4       	brcc	.+20     	; 0x1008 <main+0x24e>
			if (accCount < 10) {
     ff4:	80 91 8e 03 	lds	r24, 0x038E	; 0x80038e <accCount>
     ff8:	8a 30       	cpi	r24, 0x0A	; 10
     ffa:	78 f4       	brcc	.+30     	; 0x101a <main+0x260>
				accCount += 2;
     ffc:	80 91 8e 03 	lds	r24, 0x038E	; 0x80038e <accCount>
    1000:	8e 5f       	subi	r24, 0xFE	; 254
    1002:	80 93 8e 03 	sts	0x038E, r24	; 0x80038e <accCount>
    1006:	09 c0       	rjmp	.+18     	; 0x101a <main+0x260>
			}	
		} else {
			if (accCount > 0) {
    1008:	80 91 8e 03 	lds	r24, 0x038E	; 0x80038e <accCount>
    100c:	88 23       	and	r24, r24
    100e:	29 f0       	breq	.+10     	; 0x101a <main+0x260>
				accCount--;
    1010:	80 91 8e 03 	lds	r24, 0x038E	; 0x80038e <accCount>
    1014:	81 50       	subi	r24, 0x01	; 1
    1016:	80 93 8e 03 	sts	0x038E, r24	; 0x80038e <accCount>
			}	
		}
		
		if(isDay == 1) {
    101a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <isDay>
    101e:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <isDay+0x1>
    1022:	01 97       	sbiw	r24, 0x01	; 1
    1024:	a9 f4       	brne	.+42     	; 0x1050 <main+0x296>
			if(accCount > 4){
    1026:	80 91 8e 03 	lds	r24, 0x038E	; 0x80038e <accCount>
    102a:	85 30       	cpi	r24, 0x05	; 5
    102c:	40 f0       	brcs	.+16     	; 0x103e <main+0x284>
				TCCR0A |= (1<<COM0B0);
    102e:	84 b5       	in	r24, 0x24	; 36
    1030:	80 61       	ori	r24, 0x10	; 16
    1032:	84 bd       	out	0x24, r24	; 36
				TCCR0A |= (1<<COM0B1);
    1034:	84 b5       	in	r24, 0x24	; 36
    1036:	80 62       	ori	r24, 0x20	; 32
    1038:	84 bd       	out	0x24, r24	; 36
				OCR0B = 0;
    103a:	18 bc       	out	0x28, r1	; 40
    103c:	2b c0       	rjmp	.+86     	; 0x1094 <main+0x2da>
			} else {
				TCCR0A &= ~(1<<COM0B0);
    103e:	84 b5       	in	r24, 0x24	; 36
    1040:	8f 7e       	andi	r24, 0xEF	; 239
    1042:	84 bd       	out	0x24, r24	; 36
				TCCR0A &= ~(1<<COM0B1);
    1044:	84 b5       	in	r24, 0x24	; 36
    1046:	8f 7d       	andi	r24, 0xDF	; 223
    1048:	84 bd       	out	0x24, r24	; 36
				OCR0B = OCR0A;
    104a:	87 b5       	in	r24, 0x27	; 39
    104c:	88 bd       	out	0x28, r24	; 40
    104e:	22 c0       	rjmp	.+68     	; 0x1094 <main+0x2da>
			}
		} else {
			if(accCount > 6) {
    1050:	80 91 8e 03 	lds	r24, 0x038E	; 0x80038e <accCount>
    1054:	87 30       	cpi	r24, 0x07	; 7
    1056:	40 f0       	brcs	.+16     	; 0x1068 <main+0x2ae>
				TCCR0A |= (1<<COM0B0);
    1058:	84 b5       	in	r24, 0x24	; 36
    105a:	80 61       	ori	r24, 0x10	; 16
    105c:	84 bd       	out	0x24, r24	; 36
				TCCR0A |= (1<<COM0B1);
    105e:	84 b5       	in	r24, 0x24	; 36
    1060:	80 62       	ori	r24, 0x20	; 32
    1062:	84 bd       	out	0x24, r24	; 36
				OCR0B = 0;
    1064:	18 bc       	out	0x28, r1	; 40
    1066:	16 c0       	rjmp	.+44     	; 0x1094 <main+0x2da>
			} else {
				TCCR0A |= (1<<COM0B0);
    1068:	84 b5       	in	r24, 0x24	; 36
    106a:	80 61       	ori	r24, 0x10	; 16
    106c:	84 bd       	out	0x24, r24	; 36
				TCCR0A |= (1<<COM0B1);
    106e:	84 b5       	in	r24, 0x24	; 36
    1070:	80 62       	ori	r24, 0x20	; 32
    1072:	84 bd       	out	0x24, r24	; 36
				OCR0B = OCR0A * 9 / 10;
    1074:	87 b5       	in	r24, 0x27	; 39
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	9c 01       	movw	r18, r24
    107a:	22 0f       	add	r18, r18
    107c:	33 1f       	adc	r19, r19
    107e:	22 0f       	add	r18, r18
    1080:	33 1f       	adc	r19, r19
    1082:	22 0f       	add	r18, r18
    1084:	33 1f       	adc	r19, r19
    1086:	82 0f       	add	r24, r18
    1088:	93 1f       	adc	r25, r19
    108a:	6a e0       	ldi	r22, 0x0A	; 10
    108c:	70 e0       	ldi	r23, 0x00	; 0
    108e:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <__divmodhi4>
    1092:	68 bd       	out	0x28, r22	; 40
		//speed++;
		//minute++;
		// update speed
		//sprintf(String, "ADC: \r%u\n", ADC);
		//UART_putstring(String);
		if (ADC <= 1000) {
    1094:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    1098:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    109c:	89 3e       	cpi	r24, 0xE9	; 233
    109e:	93 40       	sbci	r25, 0x03	; 3
    10a0:	28 f4       	brcc	.+10     	; 0x10ac <main+0x2f2>
			isDay = 0;
    10a2:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <isDay+0x1>
    10a6:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <isDay>
    10aa:	06 c0       	rjmp	.+12     	; 0x10b8 <main+0x2fe>
		} else {
			isDay = 1;
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <isDay+0x1>
    10b4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <isDay>
		}
		sprintf(String, "ACC: %u\n", accValH);
    10b8:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <accValH>
    10bc:	1f 92       	push	r1
    10be:	8f 93       	push	r24
    10c0:	8f e7       	ldi	r24, 0x7F	; 127
    10c2:	93 e0       	ldi	r25, 0x03	; 3
    10c4:	9f 93       	push	r25
    10c6:	8f 93       	push	r24
    10c8:	8f e8       	ldi	r24, 0x8F	; 143
    10ca:	93 e0       	ldi	r25, 0x03	; 3
    10cc:	9f 93       	push	r25
    10ce:	8f 93       	push	r24
    10d0:	0e 94 b0 0c 	call	0x1960	; 0x1960 <sprintf>
		UART_putstring(String);
    10d4:	8f e8       	ldi	r24, 0x8F	; 143
    10d6:	93 e0       	ldi	r25, 0x03	; 3
    10d8:	0e 94 af 09 	call	0x135e	; 0x135e <UART_putstring>
		if (accValH > 120) {
    10dc:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <accValH>
    10e0:	0f 90       	pop	r0
    10e2:	0f 90       	pop	r0
    10e4:	0f 90       	pop	r0
    10e6:	0f 90       	pop	r0
    10e8:	0f 90       	pop	r0
    10ea:	0f 90       	pop	r0
    10ec:	89 37       	cpi	r24, 0x79	; 121
    10ee:	28 f0       	brcs	.+10     	; 0x10fa <main+0x340>
			accValH = 256 - accValH;
    10f0:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <accValH>
    10f4:	81 95       	neg	r24
    10f6:	80 93 8d 03 	sts	0x038D, r24	; 0x80038d <accValH>
		}
		float gees = (((float)accValH) / 60.0);
    10fa:	60 91 8d 03 	lds	r22, 0x038D	; 0x80038d <accValH>
    10fe:	70 e0       	ldi	r23, 0x00	; 0
    1100:	80 e0       	ldi	r24, 0x00	; 0
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <__floatunsisf>
    1108:	20 e0       	ldi	r18, 0x00	; 0
    110a:	30 e0       	ldi	r19, 0x00	; 0
    110c:	40 e7       	ldi	r20, 0x70	; 112
    110e:	52 e4       	ldi	r21, 0x42	; 66
    1110:	0e 94 bc 09 	call	0x1378	; 0x1378 <__divsf3>
		speed = gees * 22;
    1114:	20 e0       	ldi	r18, 0x00	; 0
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	40 eb       	ldi	r20, 0xB0	; 176
    111a:	51 e4       	ldi	r21, 0x41	; 65
    111c:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <__mulsf3>
    1120:	0e 94 2e 0a 	call	0x145c	; 0x145c <__fixunssfsi>
    1124:	6b 01       	movw	r12, r22
    1126:	7c 01       	movw	r14, r24
		speed = speed % 99;
    1128:	9b 01       	movw	r18, r22
    112a:	af e7       	ldi	r26, 0x7F	; 127
    112c:	b5 ea       	ldi	r27, 0xA5	; 165
    112e:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <__umulhisi3>
    1132:	00 24       	eor	r0, r0
    1134:	88 0f       	add	r24, r24
    1136:	99 1f       	adc	r25, r25
    1138:	00 1c       	adc	r0, r0
    113a:	88 0f       	add	r24, r24
    113c:	99 1f       	adc	r25, r25
    113e:	00 1c       	adc	r0, r0
    1140:	89 2f       	mov	r24, r25
    1142:	90 2d       	mov	r25, r0
    1144:	43 e6       	ldi	r20, 0x63	; 99
    1146:	48 9f       	mul	r20, r24
    1148:	90 01       	movw	r18, r0
    114a:	49 9f       	mul	r20, r25
    114c:	30 0d       	add	r19, r0
    114e:	11 24       	eor	r1, r1
    1150:	c6 01       	movw	r24, r12
    1152:	82 1b       	sub	r24, r18
    1154:	93 0b       	sbc	r25, r19
    1156:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <speed+0x1>
    115a:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <speed>
		counter++;
    115e:	20 91 88 03 	lds	r18, 0x0388	; 0x800388 <__data_end>
    1162:	30 91 89 03 	lds	r19, 0x0389	; 0x800389 <__data_end+0x1>
    1166:	2f 5f       	subi	r18, 0xFF	; 255
    1168:	3f 4f       	sbci	r19, 0xFF	; 255
    116a:	30 93 89 03 	sts	0x0389, r19	; 0x800389 <__data_end+0x1>
    116e:	20 93 88 03 	sts	0x0388, r18	; 0x800388 <__data_end>
		if (counter == 500) {
    1172:	24 3f       	cpi	r18, 0xF4	; 244
    1174:	31 40       	sbci	r19, 0x01	; 1
    1176:	99 f4       	brne	.+38     	; 0x119e <main+0x3e4>
			minute++;
    1178:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <minute>
    117c:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <minute+0x1>
    1180:	2f 5f       	subi	r18, 0xFF	; 255
    1182:	3f 4f       	sbci	r19, 0xFF	; 255
    1184:	30 93 0b 01 	sts	0x010B, r19	; 0x80010b <minute+0x1>
    1188:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <minute>
			speed++;
    118c:	01 96       	adiw	r24, 0x01	; 1
    118e:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <speed+0x1>
    1192:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <speed>
			counter = 0;
    1196:	10 92 89 03 	sts	0x0389, r1	; 0x800389 <__data_end+0x1>
    119a:	10 92 88 03 	sts	0x0388, r1	; 0x800388 <__data_end>
		}
		draw_speed();
    119e:	0e 94 e7 03 	call	0x7ce	; 0x7ce <draw_speed>
		draw_time();
    11a2:	0e 94 1d 05 	call	0xa3a	; 0xa3a <draw_time>
		
		
    }
    11a6:	16 cf       	rjmp	.-468    	; 0xfd4 <main+0x21a>

000011a8 <SPI_Controller_Init>:
    11a8:	80 e5       	ldi	r24, 0x50	; 80
    11aa:	8c bd       	out	0x2c, r24	; 44
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	8d bd       	out	0x2d, r24	; 45
    11b0:	08 95       	ret

000011b2 <lcd_pin_init>:
    11b2:	84 b1       	in	r24, 0x04	; 4
    11b4:	8f 62       	ori	r24, 0x2F	; 47
    11b6:	84 b9       	out	0x04, r24	; 4
    11b8:	8a b1       	in	r24, 0x0a	; 10
    11ba:	80 64       	ori	r24, 0x40	; 64
    11bc:	8a b9       	out	0x0a, r24	; 10
    11be:	84 b5       	in	r24, 0x24	; 36
    11c0:	83 68       	ori	r24, 0x83	; 131
    11c2:	84 bd       	out	0x24, r24	; 36
    11c4:	85 b5       	in	r24, 0x25	; 37
    11c6:	84 60       	ori	r24, 0x04	; 4
    11c8:	85 bd       	out	0x25, r24	; 37
    11ca:	8f e7       	ldi	r24, 0x7F	; 127
    11cc:	87 bd       	out	0x27, r24	; 39
    11ce:	83 ed       	ldi	r24, 0xD3	; 211
    11d0:	90 e3       	ldi	r25, 0x30	; 48
    11d2:	01 97       	sbiw	r24, 0x01	; 1
    11d4:	f1 f7       	brne	.-4      	; 0x11d2 <lcd_pin_init+0x20>
    11d6:	00 c0       	rjmp	.+0      	; 0x11d8 <lcd_pin_init+0x26>
    11d8:	00 00       	nop
    11da:	85 b1       	in	r24, 0x05	; 5
    11dc:	82 60       	ori	r24, 0x02	; 2
    11de:	85 b9       	out	0x05, r24	; 5
    11e0:	08 95       	ret

000011e2 <Delay_ms>:
    11e2:	07 c0       	rjmp	.+14     	; 0x11f2 <Delay_ms+0x10>
    11e4:	89 ef       	ldi	r24, 0xF9	; 249
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	01 97       	sbiw	r24, 0x01	; 1
    11ea:	f1 f7       	brne	.-4      	; 0x11e8 <Delay_ms+0x6>
    11ec:	00 c0       	rjmp	.+0      	; 0x11ee <Delay_ms+0xc>
    11ee:	00 00       	nop
    11f0:	c9 01       	movw	r24, r18
    11f2:	9c 01       	movw	r18, r24
    11f4:	21 50       	subi	r18, 0x01	; 1
    11f6:	31 09       	sbc	r19, r1
    11f8:	89 2b       	or	r24, r25
    11fa:	a1 f7       	brne	.-24     	; 0x11e4 <Delay_ms+0x2>
    11fc:	08 95       	ret

000011fe <SPI_ControllerTx_stream>:
    11fe:	8e bd       	out	0x2e, r24	; 46
    1200:	0d b4       	in	r0, 0x2d	; 45
    1202:	07 fe       	sbrs	r0, 7
    1204:	fd cf       	rjmp	.-6      	; 0x1200 <SPI_ControllerTx_stream+0x2>
    1206:	08 95       	ret

00001208 <SPI_ControllerTx_16bit>:
    1208:	25 b1       	in	r18, 0x05	; 5
    120a:	2b 7f       	andi	r18, 0xFB	; 251
    120c:	25 b9       	out	0x05, r18	; 5
    120e:	9e bd       	out	0x2e, r25	; 46
    1210:	0d b4       	in	r0, 0x2d	; 45
    1212:	07 fe       	sbrs	r0, 7
    1214:	fd cf       	rjmp	.-6      	; 0x1210 <SPI_ControllerTx_16bit+0x8>
    1216:	8e bd       	out	0x2e, r24	; 46
    1218:	0d b4       	in	r0, 0x2d	; 45
    121a:	07 fe       	sbrs	r0, 7
    121c:	fd cf       	rjmp	.-6      	; 0x1218 <SPI_ControllerTx_16bit+0x10>
    121e:	85 b1       	in	r24, 0x05	; 5
    1220:	84 60       	ori	r24, 0x04	; 4
    1222:	85 b9       	out	0x05, r24	; 5
    1224:	08 95       	ret

00001226 <SPI_ControllerTx_16bit_stream>:
    1226:	9e bd       	out	0x2e, r25	; 46
    1228:	0d b4       	in	r0, 0x2d	; 45
    122a:	07 fe       	sbrs	r0, 7
    122c:	fd cf       	rjmp	.-6      	; 0x1228 <SPI_ControllerTx_16bit_stream+0x2>
    122e:	8e bd       	out	0x2e, r24	; 46
    1230:	0d b4       	in	r0, 0x2d	; 45
    1232:	07 fe       	sbrs	r0, 7
    1234:	fd cf       	rjmp	.-6      	; 0x1230 <SPI_ControllerTx_16bit_stream+0xa>
    1236:	08 95       	ret

00001238 <sendCommands>:
    1238:	ff 92       	push	r15
    123a:	0f 93       	push	r16
    123c:	1f 93       	push	r17
    123e:	cf 93       	push	r28
    1240:	df 93       	push	r29
    1242:	ec 01       	movw	r28, r24
    1244:	85 b1       	in	r24, 0x05	; 5
    1246:	8b 7f       	andi	r24, 0xFB	; 251
    1248:	85 b9       	out	0x05, r24	; 5
    124a:	27 c0       	rjmp	.+78     	; 0x129a <sendCommands+0x62>
    124c:	85 b1       	in	r24, 0x05	; 5
    124e:	8e 7f       	andi	r24, 0xFE	; 254
    1250:	85 b9       	out	0x05, r24	; 5
    1252:	88 81       	ld	r24, Y
    1254:	0e 94 ff 08 	call	0x11fe	; 0x11fe <SPI_ControllerTx_stream>
    1258:	fe 01       	movw	r30, r28
    125a:	32 96       	adiw	r30, 0x02	; 2
    125c:	89 81       	ldd	r24, Y+1	; 0x01
    125e:	95 b1       	in	r25, 0x05	; 5
    1260:	91 60       	ori	r25, 0x01	; 1
    1262:	95 b9       	out	0x05, r25	; 5
    1264:	08 c0       	rjmp	.+16     	; 0x1276 <sendCommands+0x3e>
    1266:	8f 01       	movw	r16, r30
    1268:	0f 5f       	subi	r16, 0xFF	; 255
    126a:	1f 4f       	sbci	r17, 0xFF	; 255
    126c:	80 81       	ld	r24, Z
    126e:	0e 94 ff 08 	call	0x11fe	; 0x11fe <SPI_ControllerTx_stream>
    1272:	8c 2f       	mov	r24, r28
    1274:	f8 01       	movw	r30, r16
    1276:	cf ef       	ldi	r28, 0xFF	; 255
    1278:	c8 0f       	add	r28, r24
    127a:	81 11       	cpse	r24, r1
    127c:	f4 cf       	rjmp	.-24     	; 0x1266 <sendCommands+0x2e>
    127e:	ef 01       	movw	r28, r30
    1280:	21 96       	adiw	r28, 0x01	; 1
    1282:	80 81       	ld	r24, Z
    1284:	88 23       	and	r24, r24
    1286:	41 f0       	breq	.+16     	; 0x1298 <sendCommands+0x60>
    1288:	8f 3f       	cpi	r24, 0xFF	; 255
    128a:	11 f0       	breq	.+4      	; 0x1290 <sendCommands+0x58>
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	02 c0       	rjmp	.+4      	; 0x1294 <sendCommands+0x5c>
    1290:	84 ef       	ldi	r24, 0xF4	; 244
    1292:	91 e0       	ldi	r25, 0x01	; 1
    1294:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <Delay_ms>
    1298:	6f 2d       	mov	r22, r15
    129a:	ff 24       	eor	r15, r15
    129c:	fa 94       	dec	r15
    129e:	f6 0e       	add	r15, r22
    12a0:	61 11       	cpse	r22, r1
    12a2:	d4 cf       	rjmp	.-88     	; 0x124c <sendCommands+0x14>
    12a4:	85 b1       	in	r24, 0x05	; 5
    12a6:	84 60       	ori	r24, 0x04	; 4
    12a8:	85 b9       	out	0x05, r24	; 5
    12aa:	df 91       	pop	r29
    12ac:	cf 91       	pop	r28
    12ae:	1f 91       	pop	r17
    12b0:	0f 91       	pop	r16
    12b2:	ff 90       	pop	r15
    12b4:	08 95       	ret

000012b6 <lcd_init>:
    12b6:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <lcd_pin_init>
    12ba:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <SPI_Controller_Init>
    12be:	81 ee       	ldi	r24, 0xE1	; 225
    12c0:	94 e0       	ldi	r25, 0x04	; 4
    12c2:	01 97       	sbiw	r24, 0x01	; 1
    12c4:	f1 f7       	brne	.-4      	; 0x12c2 <lcd_init+0xc>
    12c6:	00 c0       	rjmp	.+0      	; 0x12c8 <lcd_init+0x12>
    12c8:	00 00       	nop
    12ca:	66 e1       	ldi	r22, 0x16	; 22
    12cc:	84 e1       	ldi	r24, 0x14	; 20
    12ce:	91 e0       	ldi	r25, 0x01	; 1
    12d0:	0e 94 1c 09 	call	0x1238	; 0x1238 <sendCommands>
    12d4:	08 95       	ret

000012d6 <LCD_setAddr>:
    12d6:	cf 93       	push	r28
    12d8:	df 93       	push	r29
    12da:	cd b7       	in	r28, 0x3d	; 61
    12dc:	de b7       	in	r29, 0x3e	; 62
    12de:	61 97       	sbiw	r28, 0x11	; 17
    12e0:	0f b6       	in	r0, 0x3f	; 63
    12e2:	f8 94       	cli
    12e4:	de bf       	out	0x3e, r29	; 62
    12e6:	0f be       	out	0x3f, r0	; 63
    12e8:	cd bf       	out	0x3d, r28	; 61
    12ea:	9a e2       	ldi	r25, 0x2A	; 42
    12ec:	99 83       	std	Y+1, r25	; 0x01
    12ee:	94 e0       	ldi	r25, 0x04	; 4
    12f0:	9a 83       	std	Y+2, r25	; 0x02
    12f2:	1b 82       	std	Y+3, r1	; 0x03
    12f4:	8c 83       	std	Y+4, r24	; 0x04
    12f6:	1d 82       	std	Y+5, r1	; 0x05
    12f8:	4e 83       	std	Y+6, r20	; 0x06
    12fa:	1f 82       	std	Y+7, r1	; 0x07
    12fc:	8b e2       	ldi	r24, 0x2B	; 43
    12fe:	88 87       	std	Y+8, r24	; 0x08
    1300:	99 87       	std	Y+9, r25	; 0x09
    1302:	1a 86       	std	Y+10, r1	; 0x0a
    1304:	6b 87       	std	Y+11, r22	; 0x0b
    1306:	1c 86       	std	Y+12, r1	; 0x0c
    1308:	2d 87       	std	Y+13, r18	; 0x0d
    130a:	1e 86       	std	Y+14, r1	; 0x0e
    130c:	8c e2       	ldi	r24, 0x2C	; 44
    130e:	8f 87       	std	Y+15, r24	; 0x0f
    1310:	18 8a       	std	Y+16, r1	; 0x10
    1312:	85 e0       	ldi	r24, 0x05	; 5
    1314:	89 8b       	std	Y+17, r24	; 0x11
    1316:	63 e0       	ldi	r22, 0x03	; 3
    1318:	ce 01       	movw	r24, r28
    131a:	01 96       	adiw	r24, 0x01	; 1
    131c:	0e 94 1c 09 	call	0x1238	; 0x1238 <sendCommands>
    1320:	61 96       	adiw	r28, 0x11	; 17
    1322:	0f b6       	in	r0, 0x3f	; 63
    1324:	f8 94       	cli
    1326:	de bf       	out	0x3e, r29	; 62
    1328:	0f be       	out	0x3f, r0	; 63
    132a:	cd bf       	out	0x3d, r28	; 61
    132c:	df 91       	pop	r29
    132e:	cf 91       	pop	r28
    1330:	08 95       	ret

00001332 <UART_init>:
    1332:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    1336:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    133a:	88 e1       	ldi	r24, 0x18	; 24
    133c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    1340:	e2 ec       	ldi	r30, 0xC2	; 194
    1342:	f0 e0       	ldi	r31, 0x00	; 0
    1344:	86 e0       	ldi	r24, 0x06	; 6
    1346:	80 83       	st	Z, r24
    1348:	80 81       	ld	r24, Z
    134a:	88 60       	ori	r24, 0x08	; 8
    134c:	80 83       	st	Z, r24
    134e:	08 95       	ret

00001350 <UART_send>:
    1350:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    1354:	95 ff       	sbrs	r25, 5
    1356:	fc cf       	rjmp	.-8      	; 0x1350 <UART_send>
    1358:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    135c:	08 95       	ret

0000135e <UART_putstring>:
    135e:	cf 93       	push	r28
    1360:	df 93       	push	r29
    1362:	ec 01       	movw	r28, r24
    1364:	03 c0       	rjmp	.+6      	; 0x136c <UART_putstring+0xe>
    1366:	0e 94 a8 09 	call	0x1350	; 0x1350 <UART_send>
    136a:	21 96       	adiw	r28, 0x01	; 1
    136c:	88 81       	ld	r24, Y
    136e:	81 11       	cpse	r24, r1
    1370:	fa cf       	rjmp	.-12     	; 0x1366 <UART_putstring+0x8>
    1372:	df 91       	pop	r29
    1374:	cf 91       	pop	r28
    1376:	08 95       	ret

00001378 <__divsf3>:
    1378:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <__divsf3x>
    137c:	0c 94 b1 0a 	jmp	0x1562	; 0x1562 <__fp_round>
    1380:	0e 94 aa 0a 	call	0x1554	; 0x1554 <__fp_pscB>
    1384:	58 f0       	brcs	.+22     	; 0x139c <__divsf3+0x24>
    1386:	0e 94 a3 0a 	call	0x1546	; 0x1546 <__fp_pscA>
    138a:	40 f0       	brcs	.+16     	; 0x139c <__divsf3+0x24>
    138c:	29 f4       	brne	.+10     	; 0x1398 <__divsf3+0x20>
    138e:	5f 3f       	cpi	r21, 0xFF	; 255
    1390:	29 f0       	breq	.+10     	; 0x139c <__divsf3+0x24>
    1392:	0c 94 9a 0a 	jmp	0x1534	; 0x1534 <__fp_inf>
    1396:	51 11       	cpse	r21, r1
    1398:	0c 94 e5 0a 	jmp	0x15ca	; 0x15ca <__fp_szero>
    139c:	0c 94 a0 0a 	jmp	0x1540	; 0x1540 <__fp_nan>

000013a0 <__divsf3x>:
    13a0:	0e 94 c2 0a 	call	0x1584	; 0x1584 <__fp_split3>
    13a4:	68 f3       	brcs	.-38     	; 0x1380 <__divsf3+0x8>

000013a6 <__divsf3_pse>:
    13a6:	99 23       	and	r25, r25
    13a8:	b1 f3       	breq	.-20     	; 0x1396 <__divsf3+0x1e>
    13aa:	55 23       	and	r21, r21
    13ac:	91 f3       	breq	.-28     	; 0x1392 <__divsf3+0x1a>
    13ae:	95 1b       	sub	r25, r21
    13b0:	55 0b       	sbc	r21, r21
    13b2:	bb 27       	eor	r27, r27
    13b4:	aa 27       	eor	r26, r26
    13b6:	62 17       	cp	r22, r18
    13b8:	73 07       	cpc	r23, r19
    13ba:	84 07       	cpc	r24, r20
    13bc:	38 f0       	brcs	.+14     	; 0x13cc <__divsf3_pse+0x26>
    13be:	9f 5f       	subi	r25, 0xFF	; 255
    13c0:	5f 4f       	sbci	r21, 0xFF	; 255
    13c2:	22 0f       	add	r18, r18
    13c4:	33 1f       	adc	r19, r19
    13c6:	44 1f       	adc	r20, r20
    13c8:	aa 1f       	adc	r26, r26
    13ca:	a9 f3       	breq	.-22     	; 0x13b6 <__divsf3_pse+0x10>
    13cc:	35 d0       	rcall	.+106    	; 0x1438 <__divsf3_pse+0x92>
    13ce:	0e 2e       	mov	r0, r30
    13d0:	3a f0       	brmi	.+14     	; 0x13e0 <__divsf3_pse+0x3a>
    13d2:	e0 e8       	ldi	r30, 0x80	; 128
    13d4:	32 d0       	rcall	.+100    	; 0x143a <__divsf3_pse+0x94>
    13d6:	91 50       	subi	r25, 0x01	; 1
    13d8:	50 40       	sbci	r21, 0x00	; 0
    13da:	e6 95       	lsr	r30
    13dc:	00 1c       	adc	r0, r0
    13de:	ca f7       	brpl	.-14     	; 0x13d2 <__divsf3_pse+0x2c>
    13e0:	2b d0       	rcall	.+86     	; 0x1438 <__divsf3_pse+0x92>
    13e2:	fe 2f       	mov	r31, r30
    13e4:	29 d0       	rcall	.+82     	; 0x1438 <__divsf3_pse+0x92>
    13e6:	66 0f       	add	r22, r22
    13e8:	77 1f       	adc	r23, r23
    13ea:	88 1f       	adc	r24, r24
    13ec:	bb 1f       	adc	r27, r27
    13ee:	26 17       	cp	r18, r22
    13f0:	37 07       	cpc	r19, r23
    13f2:	48 07       	cpc	r20, r24
    13f4:	ab 07       	cpc	r26, r27
    13f6:	b0 e8       	ldi	r27, 0x80	; 128
    13f8:	09 f0       	breq	.+2      	; 0x13fc <__divsf3_pse+0x56>
    13fa:	bb 0b       	sbc	r27, r27
    13fc:	80 2d       	mov	r24, r0
    13fe:	bf 01       	movw	r22, r30
    1400:	ff 27       	eor	r31, r31
    1402:	93 58       	subi	r25, 0x83	; 131
    1404:	5f 4f       	sbci	r21, 0xFF	; 255
    1406:	3a f0       	brmi	.+14     	; 0x1416 <__divsf3_pse+0x70>
    1408:	9e 3f       	cpi	r25, 0xFE	; 254
    140a:	51 05       	cpc	r21, r1
    140c:	78 f0       	brcs	.+30     	; 0x142c <__divsf3_pse+0x86>
    140e:	0c 94 9a 0a 	jmp	0x1534	; 0x1534 <__fp_inf>
    1412:	0c 94 e5 0a 	jmp	0x15ca	; 0x15ca <__fp_szero>
    1416:	5f 3f       	cpi	r21, 0xFF	; 255
    1418:	e4 f3       	brlt	.-8      	; 0x1412 <__divsf3_pse+0x6c>
    141a:	98 3e       	cpi	r25, 0xE8	; 232
    141c:	d4 f3       	brlt	.-12     	; 0x1412 <__divsf3_pse+0x6c>
    141e:	86 95       	lsr	r24
    1420:	77 95       	ror	r23
    1422:	67 95       	ror	r22
    1424:	b7 95       	ror	r27
    1426:	f7 95       	ror	r31
    1428:	9f 5f       	subi	r25, 0xFF	; 255
    142a:	c9 f7       	brne	.-14     	; 0x141e <__divsf3_pse+0x78>
    142c:	88 0f       	add	r24, r24
    142e:	91 1d       	adc	r25, r1
    1430:	96 95       	lsr	r25
    1432:	87 95       	ror	r24
    1434:	97 f9       	bld	r25, 7
    1436:	08 95       	ret
    1438:	e1 e0       	ldi	r30, 0x01	; 1
    143a:	66 0f       	add	r22, r22
    143c:	77 1f       	adc	r23, r23
    143e:	88 1f       	adc	r24, r24
    1440:	bb 1f       	adc	r27, r27
    1442:	62 17       	cp	r22, r18
    1444:	73 07       	cpc	r23, r19
    1446:	84 07       	cpc	r24, r20
    1448:	ba 07       	cpc	r27, r26
    144a:	20 f0       	brcs	.+8      	; 0x1454 <__divsf3_pse+0xae>
    144c:	62 1b       	sub	r22, r18
    144e:	73 0b       	sbc	r23, r19
    1450:	84 0b       	sbc	r24, r20
    1452:	ba 0b       	sbc	r27, r26
    1454:	ee 1f       	adc	r30, r30
    1456:	88 f7       	brcc	.-30     	; 0x143a <__divsf3_pse+0x94>
    1458:	e0 95       	com	r30
    145a:	08 95       	ret

0000145c <__fixunssfsi>:
    145c:	0e 94 ca 0a 	call	0x1594	; 0x1594 <__fp_splitA>
    1460:	88 f0       	brcs	.+34     	; 0x1484 <__fixunssfsi+0x28>
    1462:	9f 57       	subi	r25, 0x7F	; 127
    1464:	98 f0       	brcs	.+38     	; 0x148c <__fixunssfsi+0x30>
    1466:	b9 2f       	mov	r27, r25
    1468:	99 27       	eor	r25, r25
    146a:	b7 51       	subi	r27, 0x17	; 23
    146c:	b0 f0       	brcs	.+44     	; 0x149a <__fixunssfsi+0x3e>
    146e:	e1 f0       	breq	.+56     	; 0x14a8 <__fixunssfsi+0x4c>
    1470:	66 0f       	add	r22, r22
    1472:	77 1f       	adc	r23, r23
    1474:	88 1f       	adc	r24, r24
    1476:	99 1f       	adc	r25, r25
    1478:	1a f0       	brmi	.+6      	; 0x1480 <__fixunssfsi+0x24>
    147a:	ba 95       	dec	r27
    147c:	c9 f7       	brne	.-14     	; 0x1470 <__fixunssfsi+0x14>
    147e:	14 c0       	rjmp	.+40     	; 0x14a8 <__fixunssfsi+0x4c>
    1480:	b1 30       	cpi	r27, 0x01	; 1
    1482:	91 f0       	breq	.+36     	; 0x14a8 <__fixunssfsi+0x4c>
    1484:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <__fp_zero>
    1488:	b1 e0       	ldi	r27, 0x01	; 1
    148a:	08 95       	ret
    148c:	0c 94 e4 0a 	jmp	0x15c8	; 0x15c8 <__fp_zero>
    1490:	67 2f       	mov	r22, r23
    1492:	78 2f       	mov	r23, r24
    1494:	88 27       	eor	r24, r24
    1496:	b8 5f       	subi	r27, 0xF8	; 248
    1498:	39 f0       	breq	.+14     	; 0x14a8 <__fixunssfsi+0x4c>
    149a:	b9 3f       	cpi	r27, 0xF9	; 249
    149c:	cc f3       	brlt	.-14     	; 0x1490 <__fixunssfsi+0x34>
    149e:	86 95       	lsr	r24
    14a0:	77 95       	ror	r23
    14a2:	67 95       	ror	r22
    14a4:	b3 95       	inc	r27
    14a6:	d9 f7       	brne	.-10     	; 0x149e <__fixunssfsi+0x42>
    14a8:	3e f4       	brtc	.+14     	; 0x14b8 <__fixunssfsi+0x5c>
    14aa:	90 95       	com	r25
    14ac:	80 95       	com	r24
    14ae:	70 95       	com	r23
    14b0:	61 95       	neg	r22
    14b2:	7f 4f       	sbci	r23, 0xFF	; 255
    14b4:	8f 4f       	sbci	r24, 0xFF	; 255
    14b6:	9f 4f       	sbci	r25, 0xFF	; 255
    14b8:	08 95       	ret

000014ba <__floatunsisf>:
    14ba:	e8 94       	clt
    14bc:	09 c0       	rjmp	.+18     	; 0x14d0 <__floatsisf+0x12>

000014be <__floatsisf>:
    14be:	97 fb       	bst	r25, 7
    14c0:	3e f4       	brtc	.+14     	; 0x14d0 <__floatsisf+0x12>
    14c2:	90 95       	com	r25
    14c4:	80 95       	com	r24
    14c6:	70 95       	com	r23
    14c8:	61 95       	neg	r22
    14ca:	7f 4f       	sbci	r23, 0xFF	; 255
    14cc:	8f 4f       	sbci	r24, 0xFF	; 255
    14ce:	9f 4f       	sbci	r25, 0xFF	; 255
    14d0:	99 23       	and	r25, r25
    14d2:	a9 f0       	breq	.+42     	; 0x14fe <__floatsisf+0x40>
    14d4:	f9 2f       	mov	r31, r25
    14d6:	96 e9       	ldi	r25, 0x96	; 150
    14d8:	bb 27       	eor	r27, r27
    14da:	93 95       	inc	r25
    14dc:	f6 95       	lsr	r31
    14de:	87 95       	ror	r24
    14e0:	77 95       	ror	r23
    14e2:	67 95       	ror	r22
    14e4:	b7 95       	ror	r27
    14e6:	f1 11       	cpse	r31, r1
    14e8:	f8 cf       	rjmp	.-16     	; 0x14da <__floatsisf+0x1c>
    14ea:	fa f4       	brpl	.+62     	; 0x152a <__floatsisf+0x6c>
    14ec:	bb 0f       	add	r27, r27
    14ee:	11 f4       	brne	.+4      	; 0x14f4 <__floatsisf+0x36>
    14f0:	60 ff       	sbrs	r22, 0
    14f2:	1b c0       	rjmp	.+54     	; 0x152a <__floatsisf+0x6c>
    14f4:	6f 5f       	subi	r22, 0xFF	; 255
    14f6:	7f 4f       	sbci	r23, 0xFF	; 255
    14f8:	8f 4f       	sbci	r24, 0xFF	; 255
    14fa:	9f 4f       	sbci	r25, 0xFF	; 255
    14fc:	16 c0       	rjmp	.+44     	; 0x152a <__floatsisf+0x6c>
    14fe:	88 23       	and	r24, r24
    1500:	11 f0       	breq	.+4      	; 0x1506 <__floatsisf+0x48>
    1502:	96 e9       	ldi	r25, 0x96	; 150
    1504:	11 c0       	rjmp	.+34     	; 0x1528 <__floatsisf+0x6a>
    1506:	77 23       	and	r23, r23
    1508:	21 f0       	breq	.+8      	; 0x1512 <__floatsisf+0x54>
    150a:	9e e8       	ldi	r25, 0x8E	; 142
    150c:	87 2f       	mov	r24, r23
    150e:	76 2f       	mov	r23, r22
    1510:	05 c0       	rjmp	.+10     	; 0x151c <__floatsisf+0x5e>
    1512:	66 23       	and	r22, r22
    1514:	71 f0       	breq	.+28     	; 0x1532 <__floatsisf+0x74>
    1516:	96 e8       	ldi	r25, 0x86	; 134
    1518:	86 2f       	mov	r24, r22
    151a:	70 e0       	ldi	r23, 0x00	; 0
    151c:	60 e0       	ldi	r22, 0x00	; 0
    151e:	2a f0       	brmi	.+10     	; 0x152a <__floatsisf+0x6c>
    1520:	9a 95       	dec	r25
    1522:	66 0f       	add	r22, r22
    1524:	77 1f       	adc	r23, r23
    1526:	88 1f       	adc	r24, r24
    1528:	da f7       	brpl	.-10     	; 0x1520 <__floatsisf+0x62>
    152a:	88 0f       	add	r24, r24
    152c:	96 95       	lsr	r25
    152e:	87 95       	ror	r24
    1530:	97 f9       	bld	r25, 7
    1532:	08 95       	ret

00001534 <__fp_inf>:
    1534:	97 f9       	bld	r25, 7
    1536:	9f 67       	ori	r25, 0x7F	; 127
    1538:	80 e8       	ldi	r24, 0x80	; 128
    153a:	70 e0       	ldi	r23, 0x00	; 0
    153c:	60 e0       	ldi	r22, 0x00	; 0
    153e:	08 95       	ret

00001540 <__fp_nan>:
    1540:	9f ef       	ldi	r25, 0xFF	; 255
    1542:	80 ec       	ldi	r24, 0xC0	; 192
    1544:	08 95       	ret

00001546 <__fp_pscA>:
    1546:	00 24       	eor	r0, r0
    1548:	0a 94       	dec	r0
    154a:	16 16       	cp	r1, r22
    154c:	17 06       	cpc	r1, r23
    154e:	18 06       	cpc	r1, r24
    1550:	09 06       	cpc	r0, r25
    1552:	08 95       	ret

00001554 <__fp_pscB>:
    1554:	00 24       	eor	r0, r0
    1556:	0a 94       	dec	r0
    1558:	12 16       	cp	r1, r18
    155a:	13 06       	cpc	r1, r19
    155c:	14 06       	cpc	r1, r20
    155e:	05 06       	cpc	r0, r21
    1560:	08 95       	ret

00001562 <__fp_round>:
    1562:	09 2e       	mov	r0, r25
    1564:	03 94       	inc	r0
    1566:	00 0c       	add	r0, r0
    1568:	11 f4       	brne	.+4      	; 0x156e <__fp_round+0xc>
    156a:	88 23       	and	r24, r24
    156c:	52 f0       	brmi	.+20     	; 0x1582 <__fp_round+0x20>
    156e:	bb 0f       	add	r27, r27
    1570:	40 f4       	brcc	.+16     	; 0x1582 <__fp_round+0x20>
    1572:	bf 2b       	or	r27, r31
    1574:	11 f4       	brne	.+4      	; 0x157a <__fp_round+0x18>
    1576:	60 ff       	sbrs	r22, 0
    1578:	04 c0       	rjmp	.+8      	; 0x1582 <__fp_round+0x20>
    157a:	6f 5f       	subi	r22, 0xFF	; 255
    157c:	7f 4f       	sbci	r23, 0xFF	; 255
    157e:	8f 4f       	sbci	r24, 0xFF	; 255
    1580:	9f 4f       	sbci	r25, 0xFF	; 255
    1582:	08 95       	ret

00001584 <__fp_split3>:
    1584:	57 fd       	sbrc	r21, 7
    1586:	90 58       	subi	r25, 0x80	; 128
    1588:	44 0f       	add	r20, r20
    158a:	55 1f       	adc	r21, r21
    158c:	59 f0       	breq	.+22     	; 0x15a4 <__fp_splitA+0x10>
    158e:	5f 3f       	cpi	r21, 0xFF	; 255
    1590:	71 f0       	breq	.+28     	; 0x15ae <__fp_splitA+0x1a>
    1592:	47 95       	ror	r20

00001594 <__fp_splitA>:
    1594:	88 0f       	add	r24, r24
    1596:	97 fb       	bst	r25, 7
    1598:	99 1f       	adc	r25, r25
    159a:	61 f0       	breq	.+24     	; 0x15b4 <__fp_splitA+0x20>
    159c:	9f 3f       	cpi	r25, 0xFF	; 255
    159e:	79 f0       	breq	.+30     	; 0x15be <__fp_splitA+0x2a>
    15a0:	87 95       	ror	r24
    15a2:	08 95       	ret
    15a4:	12 16       	cp	r1, r18
    15a6:	13 06       	cpc	r1, r19
    15a8:	14 06       	cpc	r1, r20
    15aa:	55 1f       	adc	r21, r21
    15ac:	f2 cf       	rjmp	.-28     	; 0x1592 <__fp_split3+0xe>
    15ae:	46 95       	lsr	r20
    15b0:	f1 df       	rcall	.-30     	; 0x1594 <__fp_splitA>
    15b2:	08 c0       	rjmp	.+16     	; 0x15c4 <__fp_splitA+0x30>
    15b4:	16 16       	cp	r1, r22
    15b6:	17 06       	cpc	r1, r23
    15b8:	18 06       	cpc	r1, r24
    15ba:	99 1f       	adc	r25, r25
    15bc:	f1 cf       	rjmp	.-30     	; 0x15a0 <__fp_splitA+0xc>
    15be:	86 95       	lsr	r24
    15c0:	71 05       	cpc	r23, r1
    15c2:	61 05       	cpc	r22, r1
    15c4:	08 94       	sec
    15c6:	08 95       	ret

000015c8 <__fp_zero>:
    15c8:	e8 94       	clt

000015ca <__fp_szero>:
    15ca:	bb 27       	eor	r27, r27
    15cc:	66 27       	eor	r22, r22
    15ce:	77 27       	eor	r23, r23
    15d0:	cb 01       	movw	r24, r22
    15d2:	97 f9       	bld	r25, 7
    15d4:	08 95       	ret

000015d6 <__mulsf3>:
    15d6:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <__mulsf3x>
    15da:	0c 94 b1 0a 	jmp	0x1562	; 0x1562 <__fp_round>
    15de:	0e 94 a3 0a 	call	0x1546	; 0x1546 <__fp_pscA>
    15e2:	38 f0       	brcs	.+14     	; 0x15f2 <__mulsf3+0x1c>
    15e4:	0e 94 aa 0a 	call	0x1554	; 0x1554 <__fp_pscB>
    15e8:	20 f0       	brcs	.+8      	; 0x15f2 <__mulsf3+0x1c>
    15ea:	95 23       	and	r25, r21
    15ec:	11 f0       	breq	.+4      	; 0x15f2 <__mulsf3+0x1c>
    15ee:	0c 94 9a 0a 	jmp	0x1534	; 0x1534 <__fp_inf>
    15f2:	0c 94 a0 0a 	jmp	0x1540	; 0x1540 <__fp_nan>
    15f6:	11 24       	eor	r1, r1
    15f8:	0c 94 e5 0a 	jmp	0x15ca	; 0x15ca <__fp_szero>

000015fc <__mulsf3x>:
    15fc:	0e 94 c2 0a 	call	0x1584	; 0x1584 <__fp_split3>
    1600:	70 f3       	brcs	.-36     	; 0x15de <__mulsf3+0x8>

00001602 <__mulsf3_pse>:
    1602:	95 9f       	mul	r25, r21
    1604:	c1 f3       	breq	.-16     	; 0x15f6 <__mulsf3+0x20>
    1606:	95 0f       	add	r25, r21
    1608:	50 e0       	ldi	r21, 0x00	; 0
    160a:	55 1f       	adc	r21, r21
    160c:	62 9f       	mul	r22, r18
    160e:	f0 01       	movw	r30, r0
    1610:	72 9f       	mul	r23, r18
    1612:	bb 27       	eor	r27, r27
    1614:	f0 0d       	add	r31, r0
    1616:	b1 1d       	adc	r27, r1
    1618:	63 9f       	mul	r22, r19
    161a:	aa 27       	eor	r26, r26
    161c:	f0 0d       	add	r31, r0
    161e:	b1 1d       	adc	r27, r1
    1620:	aa 1f       	adc	r26, r26
    1622:	64 9f       	mul	r22, r20
    1624:	66 27       	eor	r22, r22
    1626:	b0 0d       	add	r27, r0
    1628:	a1 1d       	adc	r26, r1
    162a:	66 1f       	adc	r22, r22
    162c:	82 9f       	mul	r24, r18
    162e:	22 27       	eor	r18, r18
    1630:	b0 0d       	add	r27, r0
    1632:	a1 1d       	adc	r26, r1
    1634:	62 1f       	adc	r22, r18
    1636:	73 9f       	mul	r23, r19
    1638:	b0 0d       	add	r27, r0
    163a:	a1 1d       	adc	r26, r1
    163c:	62 1f       	adc	r22, r18
    163e:	83 9f       	mul	r24, r19
    1640:	a0 0d       	add	r26, r0
    1642:	61 1d       	adc	r22, r1
    1644:	22 1f       	adc	r18, r18
    1646:	74 9f       	mul	r23, r20
    1648:	33 27       	eor	r19, r19
    164a:	a0 0d       	add	r26, r0
    164c:	61 1d       	adc	r22, r1
    164e:	23 1f       	adc	r18, r19
    1650:	84 9f       	mul	r24, r20
    1652:	60 0d       	add	r22, r0
    1654:	21 1d       	adc	r18, r1
    1656:	82 2f       	mov	r24, r18
    1658:	76 2f       	mov	r23, r22
    165a:	6a 2f       	mov	r22, r26
    165c:	11 24       	eor	r1, r1
    165e:	9f 57       	subi	r25, 0x7F	; 127
    1660:	50 40       	sbci	r21, 0x00	; 0
    1662:	9a f0       	brmi	.+38     	; 0x168a <__mulsf3_pse+0x88>
    1664:	f1 f0       	breq	.+60     	; 0x16a2 <__mulsf3_pse+0xa0>
    1666:	88 23       	and	r24, r24
    1668:	4a f0       	brmi	.+18     	; 0x167c <__mulsf3_pse+0x7a>
    166a:	ee 0f       	add	r30, r30
    166c:	ff 1f       	adc	r31, r31
    166e:	bb 1f       	adc	r27, r27
    1670:	66 1f       	adc	r22, r22
    1672:	77 1f       	adc	r23, r23
    1674:	88 1f       	adc	r24, r24
    1676:	91 50       	subi	r25, 0x01	; 1
    1678:	50 40       	sbci	r21, 0x00	; 0
    167a:	a9 f7       	brne	.-22     	; 0x1666 <__mulsf3_pse+0x64>
    167c:	9e 3f       	cpi	r25, 0xFE	; 254
    167e:	51 05       	cpc	r21, r1
    1680:	80 f0       	brcs	.+32     	; 0x16a2 <__mulsf3_pse+0xa0>
    1682:	0c 94 9a 0a 	jmp	0x1534	; 0x1534 <__fp_inf>
    1686:	0c 94 e5 0a 	jmp	0x15ca	; 0x15ca <__fp_szero>
    168a:	5f 3f       	cpi	r21, 0xFF	; 255
    168c:	e4 f3       	brlt	.-8      	; 0x1686 <__mulsf3_pse+0x84>
    168e:	98 3e       	cpi	r25, 0xE8	; 232
    1690:	d4 f3       	brlt	.-12     	; 0x1686 <__mulsf3_pse+0x84>
    1692:	86 95       	lsr	r24
    1694:	77 95       	ror	r23
    1696:	67 95       	ror	r22
    1698:	b7 95       	ror	r27
    169a:	f7 95       	ror	r31
    169c:	e7 95       	ror	r30
    169e:	9f 5f       	subi	r25, 0xFF	; 255
    16a0:	c1 f7       	brne	.-16     	; 0x1692 <__mulsf3_pse+0x90>
    16a2:	fe 2b       	or	r31, r30
    16a4:	88 0f       	add	r24, r24
    16a6:	91 1d       	adc	r25, r1
    16a8:	96 95       	lsr	r25
    16aa:	87 95       	ror	r24
    16ac:	97 f9       	bld	r25, 7
    16ae:	08 95       	ret

000016b0 <__divmodhi4>:
    16b0:	97 fb       	bst	r25, 7
    16b2:	07 2e       	mov	r0, r23
    16b4:	16 f4       	brtc	.+4      	; 0x16ba <__divmodhi4+0xa>
    16b6:	00 94       	com	r0
    16b8:	07 d0       	rcall	.+14     	; 0x16c8 <__divmodhi4_neg1>
    16ba:	77 fd       	sbrc	r23, 7
    16bc:	09 d0       	rcall	.+18     	; 0x16d0 <__divmodhi4_neg2>
    16be:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <__udivmodhi4>
    16c2:	07 fc       	sbrc	r0, 7
    16c4:	05 d0       	rcall	.+10     	; 0x16d0 <__divmodhi4_neg2>
    16c6:	3e f4       	brtc	.+14     	; 0x16d6 <__divmodhi4_exit>

000016c8 <__divmodhi4_neg1>:
    16c8:	90 95       	com	r25
    16ca:	81 95       	neg	r24
    16cc:	9f 4f       	sbci	r25, 0xFF	; 255
    16ce:	08 95       	ret

000016d0 <__divmodhi4_neg2>:
    16d0:	70 95       	com	r23
    16d2:	61 95       	neg	r22
    16d4:	7f 4f       	sbci	r23, 0xFF	; 255

000016d6 <__divmodhi4_exit>:
    16d6:	08 95       	ret

000016d8 <__umulhisi3>:
    16d8:	a2 9f       	mul	r26, r18
    16da:	b0 01       	movw	r22, r0
    16dc:	b3 9f       	mul	r27, r19
    16de:	c0 01       	movw	r24, r0
    16e0:	a3 9f       	mul	r26, r19
    16e2:	70 0d       	add	r23, r0
    16e4:	81 1d       	adc	r24, r1
    16e6:	11 24       	eor	r1, r1
    16e8:	91 1d       	adc	r25, r1
    16ea:	b2 9f       	mul	r27, r18
    16ec:	70 0d       	add	r23, r0
    16ee:	81 1d       	adc	r24, r1
    16f0:	11 24       	eor	r1, r1
    16f2:	91 1d       	adc	r25, r1
    16f4:	08 95       	ret

000016f6 <__udivmodhi4>:
    16f6:	aa 1b       	sub	r26, r26
    16f8:	bb 1b       	sub	r27, r27
    16fa:	51 e1       	ldi	r21, 0x11	; 17
    16fc:	07 c0       	rjmp	.+14     	; 0x170c <__udivmodhi4_ep>

000016fe <__udivmodhi4_loop>:
    16fe:	aa 1f       	adc	r26, r26
    1700:	bb 1f       	adc	r27, r27
    1702:	a6 17       	cp	r26, r22
    1704:	b7 07       	cpc	r27, r23
    1706:	10 f0       	brcs	.+4      	; 0x170c <__udivmodhi4_ep>
    1708:	a6 1b       	sub	r26, r22
    170a:	b7 0b       	sbc	r27, r23

0000170c <__udivmodhi4_ep>:
    170c:	88 1f       	adc	r24, r24
    170e:	99 1f       	adc	r25, r25
    1710:	5a 95       	dec	r21
    1712:	a9 f7       	brne	.-22     	; 0x16fe <__udivmodhi4_loop>
    1714:	80 95       	com	r24
    1716:	90 95       	com	r25
    1718:	bc 01       	movw	r22, r24
    171a:	cd 01       	movw	r24, r26
    171c:	08 95       	ret

0000171e <malloc>:
    171e:	0f 93       	push	r16
    1720:	1f 93       	push	r17
    1722:	cf 93       	push	r28
    1724:	df 93       	push	r29
    1726:	82 30       	cpi	r24, 0x02	; 2
    1728:	91 05       	cpc	r25, r1
    172a:	10 f4       	brcc	.+4      	; 0x1730 <malloc+0x12>
    172c:	82 e0       	ldi	r24, 0x02	; 2
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	e0 91 aa 03 	lds	r30, 0x03AA	; 0x8003aa <__flp>
    1734:	f0 91 ab 03 	lds	r31, 0x03AB	; 0x8003ab <__flp+0x1>
    1738:	20 e0       	ldi	r18, 0x00	; 0
    173a:	30 e0       	ldi	r19, 0x00	; 0
    173c:	a0 e0       	ldi	r26, 0x00	; 0
    173e:	b0 e0       	ldi	r27, 0x00	; 0
    1740:	30 97       	sbiw	r30, 0x00	; 0
    1742:	19 f1       	breq	.+70     	; 0x178a <malloc+0x6c>
    1744:	40 81       	ld	r20, Z
    1746:	51 81       	ldd	r21, Z+1	; 0x01
    1748:	02 81       	ldd	r16, Z+2	; 0x02
    174a:	13 81       	ldd	r17, Z+3	; 0x03
    174c:	48 17       	cp	r20, r24
    174e:	59 07       	cpc	r21, r25
    1750:	c8 f0       	brcs	.+50     	; 0x1784 <malloc+0x66>
    1752:	84 17       	cp	r24, r20
    1754:	95 07       	cpc	r25, r21
    1756:	69 f4       	brne	.+26     	; 0x1772 <malloc+0x54>
    1758:	10 97       	sbiw	r26, 0x00	; 0
    175a:	31 f0       	breq	.+12     	; 0x1768 <malloc+0x4a>
    175c:	12 96       	adiw	r26, 0x02	; 2
    175e:	0c 93       	st	X, r16
    1760:	12 97       	sbiw	r26, 0x02	; 2
    1762:	13 96       	adiw	r26, 0x03	; 3
    1764:	1c 93       	st	X, r17
    1766:	27 c0       	rjmp	.+78     	; 0x17b6 <malloc+0x98>
    1768:	00 93 aa 03 	sts	0x03AA, r16	; 0x8003aa <__flp>
    176c:	10 93 ab 03 	sts	0x03AB, r17	; 0x8003ab <__flp+0x1>
    1770:	22 c0       	rjmp	.+68     	; 0x17b6 <malloc+0x98>
    1772:	21 15       	cp	r18, r1
    1774:	31 05       	cpc	r19, r1
    1776:	19 f0       	breq	.+6      	; 0x177e <malloc+0x60>
    1778:	42 17       	cp	r20, r18
    177a:	53 07       	cpc	r21, r19
    177c:	18 f4       	brcc	.+6      	; 0x1784 <malloc+0x66>
    177e:	9a 01       	movw	r18, r20
    1780:	bd 01       	movw	r22, r26
    1782:	ef 01       	movw	r28, r30
    1784:	df 01       	movw	r26, r30
    1786:	f8 01       	movw	r30, r16
    1788:	db cf       	rjmp	.-74     	; 0x1740 <malloc+0x22>
    178a:	21 15       	cp	r18, r1
    178c:	31 05       	cpc	r19, r1
    178e:	f9 f0       	breq	.+62     	; 0x17ce <malloc+0xb0>
    1790:	28 1b       	sub	r18, r24
    1792:	39 0b       	sbc	r19, r25
    1794:	24 30       	cpi	r18, 0x04	; 4
    1796:	31 05       	cpc	r19, r1
    1798:	80 f4       	brcc	.+32     	; 0x17ba <malloc+0x9c>
    179a:	8a 81       	ldd	r24, Y+2	; 0x02
    179c:	9b 81       	ldd	r25, Y+3	; 0x03
    179e:	61 15       	cp	r22, r1
    17a0:	71 05       	cpc	r23, r1
    17a2:	21 f0       	breq	.+8      	; 0x17ac <malloc+0x8e>
    17a4:	fb 01       	movw	r30, r22
    17a6:	93 83       	std	Z+3, r25	; 0x03
    17a8:	82 83       	std	Z+2, r24	; 0x02
    17aa:	04 c0       	rjmp	.+8      	; 0x17b4 <malloc+0x96>
    17ac:	90 93 ab 03 	sts	0x03AB, r25	; 0x8003ab <__flp+0x1>
    17b0:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <__flp>
    17b4:	fe 01       	movw	r30, r28
    17b6:	32 96       	adiw	r30, 0x02	; 2
    17b8:	44 c0       	rjmp	.+136    	; 0x1842 <malloc+0x124>
    17ba:	fe 01       	movw	r30, r28
    17bc:	e2 0f       	add	r30, r18
    17be:	f3 1f       	adc	r31, r19
    17c0:	81 93       	st	Z+, r24
    17c2:	91 93       	st	Z+, r25
    17c4:	22 50       	subi	r18, 0x02	; 2
    17c6:	31 09       	sbc	r19, r1
    17c8:	39 83       	std	Y+1, r19	; 0x01
    17ca:	28 83       	st	Y, r18
    17cc:	3a c0       	rjmp	.+116    	; 0x1842 <malloc+0x124>
    17ce:	20 91 a8 03 	lds	r18, 0x03A8	; 0x8003a8 <__brkval>
    17d2:	30 91 a9 03 	lds	r19, 0x03A9	; 0x8003a9 <__brkval+0x1>
    17d6:	23 2b       	or	r18, r19
    17d8:	41 f4       	brne	.+16     	; 0x17ea <malloc+0xcc>
    17da:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    17de:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    17e2:	30 93 a9 03 	sts	0x03A9, r19	; 0x8003a9 <__brkval+0x1>
    17e6:	20 93 a8 03 	sts	0x03A8, r18	; 0x8003a8 <__brkval>
    17ea:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    17ee:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    17f2:	21 15       	cp	r18, r1
    17f4:	31 05       	cpc	r19, r1
    17f6:	41 f4       	brne	.+16     	; 0x1808 <malloc+0xea>
    17f8:	2d b7       	in	r18, 0x3d	; 61
    17fa:	3e b7       	in	r19, 0x3e	; 62
    17fc:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1800:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1804:	24 1b       	sub	r18, r20
    1806:	35 0b       	sbc	r19, r21
    1808:	e0 91 a8 03 	lds	r30, 0x03A8	; 0x8003a8 <__brkval>
    180c:	f0 91 a9 03 	lds	r31, 0x03A9	; 0x8003a9 <__brkval+0x1>
    1810:	e2 17       	cp	r30, r18
    1812:	f3 07       	cpc	r31, r19
    1814:	a0 f4       	brcc	.+40     	; 0x183e <malloc+0x120>
    1816:	2e 1b       	sub	r18, r30
    1818:	3f 0b       	sbc	r19, r31
    181a:	28 17       	cp	r18, r24
    181c:	39 07       	cpc	r19, r25
    181e:	78 f0       	brcs	.+30     	; 0x183e <malloc+0x120>
    1820:	ac 01       	movw	r20, r24
    1822:	4e 5f       	subi	r20, 0xFE	; 254
    1824:	5f 4f       	sbci	r21, 0xFF	; 255
    1826:	24 17       	cp	r18, r20
    1828:	35 07       	cpc	r19, r21
    182a:	48 f0       	brcs	.+18     	; 0x183e <malloc+0x120>
    182c:	4e 0f       	add	r20, r30
    182e:	5f 1f       	adc	r21, r31
    1830:	50 93 a9 03 	sts	0x03A9, r21	; 0x8003a9 <__brkval+0x1>
    1834:	40 93 a8 03 	sts	0x03A8, r20	; 0x8003a8 <__brkval>
    1838:	81 93       	st	Z+, r24
    183a:	91 93       	st	Z+, r25
    183c:	02 c0       	rjmp	.+4      	; 0x1842 <malloc+0x124>
    183e:	e0 e0       	ldi	r30, 0x00	; 0
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	cf 01       	movw	r24, r30
    1844:	df 91       	pop	r29
    1846:	cf 91       	pop	r28
    1848:	1f 91       	pop	r17
    184a:	0f 91       	pop	r16
    184c:	08 95       	ret

0000184e <free>:
    184e:	cf 93       	push	r28
    1850:	df 93       	push	r29
    1852:	00 97       	sbiw	r24, 0x00	; 0
    1854:	09 f4       	brne	.+2      	; 0x1858 <free+0xa>
    1856:	81 c0       	rjmp	.+258    	; 0x195a <free+0x10c>
    1858:	fc 01       	movw	r30, r24
    185a:	32 97       	sbiw	r30, 0x02	; 2
    185c:	13 82       	std	Z+3, r1	; 0x03
    185e:	12 82       	std	Z+2, r1	; 0x02
    1860:	a0 91 aa 03 	lds	r26, 0x03AA	; 0x8003aa <__flp>
    1864:	b0 91 ab 03 	lds	r27, 0x03AB	; 0x8003ab <__flp+0x1>
    1868:	10 97       	sbiw	r26, 0x00	; 0
    186a:	81 f4       	brne	.+32     	; 0x188c <free+0x3e>
    186c:	20 81       	ld	r18, Z
    186e:	31 81       	ldd	r19, Z+1	; 0x01
    1870:	82 0f       	add	r24, r18
    1872:	93 1f       	adc	r25, r19
    1874:	20 91 a8 03 	lds	r18, 0x03A8	; 0x8003a8 <__brkval>
    1878:	30 91 a9 03 	lds	r19, 0x03A9	; 0x8003a9 <__brkval+0x1>
    187c:	28 17       	cp	r18, r24
    187e:	39 07       	cpc	r19, r25
    1880:	51 f5       	brne	.+84     	; 0x18d6 <free+0x88>
    1882:	f0 93 a9 03 	sts	0x03A9, r31	; 0x8003a9 <__brkval+0x1>
    1886:	e0 93 a8 03 	sts	0x03A8, r30	; 0x8003a8 <__brkval>
    188a:	67 c0       	rjmp	.+206    	; 0x195a <free+0x10c>
    188c:	ed 01       	movw	r28, r26
    188e:	20 e0       	ldi	r18, 0x00	; 0
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	ce 17       	cp	r28, r30
    1894:	df 07       	cpc	r29, r31
    1896:	40 f4       	brcc	.+16     	; 0x18a8 <free+0x5a>
    1898:	4a 81       	ldd	r20, Y+2	; 0x02
    189a:	5b 81       	ldd	r21, Y+3	; 0x03
    189c:	9e 01       	movw	r18, r28
    189e:	41 15       	cp	r20, r1
    18a0:	51 05       	cpc	r21, r1
    18a2:	f1 f0       	breq	.+60     	; 0x18e0 <free+0x92>
    18a4:	ea 01       	movw	r28, r20
    18a6:	f5 cf       	rjmp	.-22     	; 0x1892 <free+0x44>
    18a8:	d3 83       	std	Z+3, r29	; 0x03
    18aa:	c2 83       	std	Z+2, r28	; 0x02
    18ac:	40 81       	ld	r20, Z
    18ae:	51 81       	ldd	r21, Z+1	; 0x01
    18b0:	84 0f       	add	r24, r20
    18b2:	95 1f       	adc	r25, r21
    18b4:	c8 17       	cp	r28, r24
    18b6:	d9 07       	cpc	r29, r25
    18b8:	59 f4       	brne	.+22     	; 0x18d0 <free+0x82>
    18ba:	88 81       	ld	r24, Y
    18bc:	99 81       	ldd	r25, Y+1	; 0x01
    18be:	84 0f       	add	r24, r20
    18c0:	95 1f       	adc	r25, r21
    18c2:	02 96       	adiw	r24, 0x02	; 2
    18c4:	91 83       	std	Z+1, r25	; 0x01
    18c6:	80 83       	st	Z, r24
    18c8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ca:	9b 81       	ldd	r25, Y+3	; 0x03
    18cc:	93 83       	std	Z+3, r25	; 0x03
    18ce:	82 83       	std	Z+2, r24	; 0x02
    18d0:	21 15       	cp	r18, r1
    18d2:	31 05       	cpc	r19, r1
    18d4:	29 f4       	brne	.+10     	; 0x18e0 <free+0x92>
    18d6:	f0 93 ab 03 	sts	0x03AB, r31	; 0x8003ab <__flp+0x1>
    18da:	e0 93 aa 03 	sts	0x03AA, r30	; 0x8003aa <__flp>
    18de:	3d c0       	rjmp	.+122    	; 0x195a <free+0x10c>
    18e0:	e9 01       	movw	r28, r18
    18e2:	fb 83       	std	Y+3, r31	; 0x03
    18e4:	ea 83       	std	Y+2, r30	; 0x02
    18e6:	49 91       	ld	r20, Y+
    18e8:	59 91       	ld	r21, Y+
    18ea:	c4 0f       	add	r28, r20
    18ec:	d5 1f       	adc	r29, r21
    18ee:	ec 17       	cp	r30, r28
    18f0:	fd 07       	cpc	r31, r29
    18f2:	61 f4       	brne	.+24     	; 0x190c <free+0xbe>
    18f4:	80 81       	ld	r24, Z
    18f6:	91 81       	ldd	r25, Z+1	; 0x01
    18f8:	84 0f       	add	r24, r20
    18fa:	95 1f       	adc	r25, r21
    18fc:	02 96       	adiw	r24, 0x02	; 2
    18fe:	e9 01       	movw	r28, r18
    1900:	99 83       	std	Y+1, r25	; 0x01
    1902:	88 83       	st	Y, r24
    1904:	82 81       	ldd	r24, Z+2	; 0x02
    1906:	93 81       	ldd	r25, Z+3	; 0x03
    1908:	9b 83       	std	Y+3, r25	; 0x03
    190a:	8a 83       	std	Y+2, r24	; 0x02
    190c:	e0 e0       	ldi	r30, 0x00	; 0
    190e:	f0 e0       	ldi	r31, 0x00	; 0
    1910:	12 96       	adiw	r26, 0x02	; 2
    1912:	8d 91       	ld	r24, X+
    1914:	9c 91       	ld	r25, X
    1916:	13 97       	sbiw	r26, 0x03	; 3
    1918:	00 97       	sbiw	r24, 0x00	; 0
    191a:	19 f0       	breq	.+6      	; 0x1922 <free+0xd4>
    191c:	fd 01       	movw	r30, r26
    191e:	dc 01       	movw	r26, r24
    1920:	f7 cf       	rjmp	.-18     	; 0x1910 <free+0xc2>
    1922:	8d 91       	ld	r24, X+
    1924:	9c 91       	ld	r25, X
    1926:	11 97       	sbiw	r26, 0x01	; 1
    1928:	9d 01       	movw	r18, r26
    192a:	2e 5f       	subi	r18, 0xFE	; 254
    192c:	3f 4f       	sbci	r19, 0xFF	; 255
    192e:	82 0f       	add	r24, r18
    1930:	93 1f       	adc	r25, r19
    1932:	20 91 a8 03 	lds	r18, 0x03A8	; 0x8003a8 <__brkval>
    1936:	30 91 a9 03 	lds	r19, 0x03A9	; 0x8003a9 <__brkval+0x1>
    193a:	28 17       	cp	r18, r24
    193c:	39 07       	cpc	r19, r25
    193e:	69 f4       	brne	.+26     	; 0x195a <free+0x10c>
    1940:	30 97       	sbiw	r30, 0x00	; 0
    1942:	29 f4       	brne	.+10     	; 0x194e <free+0x100>
    1944:	10 92 ab 03 	sts	0x03AB, r1	; 0x8003ab <__flp+0x1>
    1948:	10 92 aa 03 	sts	0x03AA, r1	; 0x8003aa <__flp>
    194c:	02 c0       	rjmp	.+4      	; 0x1952 <free+0x104>
    194e:	13 82       	std	Z+3, r1	; 0x03
    1950:	12 82       	std	Z+2, r1	; 0x02
    1952:	b0 93 a9 03 	sts	0x03A9, r27	; 0x8003a9 <__brkval+0x1>
    1956:	a0 93 a8 03 	sts	0x03A8, r26	; 0x8003a8 <__brkval>
    195a:	df 91       	pop	r29
    195c:	cf 91       	pop	r28
    195e:	08 95       	ret

00001960 <sprintf>:
    1960:	ae e0       	ldi	r26, 0x0E	; 14
    1962:	b0 e0       	ldi	r27, 0x00	; 0
    1964:	e6 eb       	ldi	r30, 0xB6	; 182
    1966:	fc e0       	ldi	r31, 0x0C	; 12
    1968:	0c 94 71 0f 	jmp	0x1ee2	; 0x1ee2 <__prologue_saves__+0x1c>
    196c:	0d 89       	ldd	r16, Y+21	; 0x15
    196e:	1e 89       	ldd	r17, Y+22	; 0x16
    1970:	86 e0       	ldi	r24, 0x06	; 6
    1972:	8c 83       	std	Y+4, r24	; 0x04
    1974:	1a 83       	std	Y+2, r17	; 0x02
    1976:	09 83       	std	Y+1, r16	; 0x01
    1978:	8f ef       	ldi	r24, 0xFF	; 255
    197a:	9f e7       	ldi	r25, 0x7F	; 127
    197c:	9e 83       	std	Y+6, r25	; 0x06
    197e:	8d 83       	std	Y+5, r24	; 0x05
    1980:	ae 01       	movw	r20, r28
    1982:	47 5e       	subi	r20, 0xE7	; 231
    1984:	5f 4f       	sbci	r21, 0xFF	; 255
    1986:	6f 89       	ldd	r22, Y+23	; 0x17
    1988:	78 8d       	ldd	r23, Y+24	; 0x18
    198a:	ce 01       	movw	r24, r28
    198c:	01 96       	adiw	r24, 0x01	; 1
    198e:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <vfprintf>
    1992:	ef 81       	ldd	r30, Y+7	; 0x07
    1994:	f8 85       	ldd	r31, Y+8	; 0x08
    1996:	e0 0f       	add	r30, r16
    1998:	f1 1f       	adc	r31, r17
    199a:	10 82       	st	Z, r1
    199c:	2e 96       	adiw	r28, 0x0e	; 14
    199e:	e4 e0       	ldi	r30, 0x04	; 4
    19a0:	0c 94 8d 0f 	jmp	0x1f1a	; 0x1f1a <__epilogue_restores__+0x1c>

000019a4 <vfprintf>:
    19a4:	ab e0       	ldi	r26, 0x0B	; 11
    19a6:	b0 e0       	ldi	r27, 0x00	; 0
    19a8:	e8 ed       	ldi	r30, 0xD8	; 216
    19aa:	fc e0       	ldi	r31, 0x0C	; 12
    19ac:	0c 94 63 0f 	jmp	0x1ec6	; 0x1ec6 <__prologue_saves__>
    19b0:	6c 01       	movw	r12, r24
    19b2:	7b 01       	movw	r14, r22
    19b4:	8a 01       	movw	r16, r20
    19b6:	fc 01       	movw	r30, r24
    19b8:	17 82       	std	Z+7, r1	; 0x07
    19ba:	16 82       	std	Z+6, r1	; 0x06
    19bc:	83 81       	ldd	r24, Z+3	; 0x03
    19be:	81 ff       	sbrs	r24, 1
    19c0:	cc c1       	rjmp	.+920    	; 0x1d5a <vfprintf+0x3b6>
    19c2:	ce 01       	movw	r24, r28
    19c4:	01 96       	adiw	r24, 0x01	; 1
    19c6:	3c 01       	movw	r6, r24
    19c8:	f6 01       	movw	r30, r12
    19ca:	93 81       	ldd	r25, Z+3	; 0x03
    19cc:	f7 01       	movw	r30, r14
    19ce:	93 fd       	sbrc	r25, 3
    19d0:	85 91       	lpm	r24, Z+
    19d2:	93 ff       	sbrs	r25, 3
    19d4:	81 91       	ld	r24, Z+
    19d6:	7f 01       	movw	r14, r30
    19d8:	88 23       	and	r24, r24
    19da:	09 f4       	brne	.+2      	; 0x19de <vfprintf+0x3a>
    19dc:	ba c1       	rjmp	.+884    	; 0x1d52 <vfprintf+0x3ae>
    19de:	85 32       	cpi	r24, 0x25	; 37
    19e0:	39 f4       	brne	.+14     	; 0x19f0 <vfprintf+0x4c>
    19e2:	93 fd       	sbrc	r25, 3
    19e4:	85 91       	lpm	r24, Z+
    19e6:	93 ff       	sbrs	r25, 3
    19e8:	81 91       	ld	r24, Z+
    19ea:	7f 01       	movw	r14, r30
    19ec:	85 32       	cpi	r24, 0x25	; 37
    19ee:	29 f4       	brne	.+10     	; 0x19fa <vfprintf+0x56>
    19f0:	b6 01       	movw	r22, r12
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <fputc>
    19f8:	e7 cf       	rjmp	.-50     	; 0x19c8 <vfprintf+0x24>
    19fa:	91 2c       	mov	r9, r1
    19fc:	21 2c       	mov	r2, r1
    19fe:	31 2c       	mov	r3, r1
    1a00:	ff e1       	ldi	r31, 0x1F	; 31
    1a02:	f3 15       	cp	r31, r3
    1a04:	d8 f0       	brcs	.+54     	; 0x1a3c <vfprintf+0x98>
    1a06:	8b 32       	cpi	r24, 0x2B	; 43
    1a08:	79 f0       	breq	.+30     	; 0x1a28 <vfprintf+0x84>
    1a0a:	38 f4       	brcc	.+14     	; 0x1a1a <vfprintf+0x76>
    1a0c:	80 32       	cpi	r24, 0x20	; 32
    1a0e:	79 f0       	breq	.+30     	; 0x1a2e <vfprintf+0x8a>
    1a10:	83 32       	cpi	r24, 0x23	; 35
    1a12:	a1 f4       	brne	.+40     	; 0x1a3c <vfprintf+0x98>
    1a14:	23 2d       	mov	r18, r3
    1a16:	20 61       	ori	r18, 0x10	; 16
    1a18:	1d c0       	rjmp	.+58     	; 0x1a54 <vfprintf+0xb0>
    1a1a:	8d 32       	cpi	r24, 0x2D	; 45
    1a1c:	61 f0       	breq	.+24     	; 0x1a36 <vfprintf+0x92>
    1a1e:	80 33       	cpi	r24, 0x30	; 48
    1a20:	69 f4       	brne	.+26     	; 0x1a3c <vfprintf+0x98>
    1a22:	23 2d       	mov	r18, r3
    1a24:	21 60       	ori	r18, 0x01	; 1
    1a26:	16 c0       	rjmp	.+44     	; 0x1a54 <vfprintf+0xb0>
    1a28:	83 2d       	mov	r24, r3
    1a2a:	82 60       	ori	r24, 0x02	; 2
    1a2c:	38 2e       	mov	r3, r24
    1a2e:	e3 2d       	mov	r30, r3
    1a30:	e4 60       	ori	r30, 0x04	; 4
    1a32:	3e 2e       	mov	r3, r30
    1a34:	2a c0       	rjmp	.+84     	; 0x1a8a <vfprintf+0xe6>
    1a36:	f3 2d       	mov	r31, r3
    1a38:	f8 60       	ori	r31, 0x08	; 8
    1a3a:	1d c0       	rjmp	.+58     	; 0x1a76 <vfprintf+0xd2>
    1a3c:	37 fc       	sbrc	r3, 7
    1a3e:	2d c0       	rjmp	.+90     	; 0x1a9a <vfprintf+0xf6>
    1a40:	20 ed       	ldi	r18, 0xD0	; 208
    1a42:	28 0f       	add	r18, r24
    1a44:	2a 30       	cpi	r18, 0x0A	; 10
    1a46:	40 f0       	brcs	.+16     	; 0x1a58 <vfprintf+0xb4>
    1a48:	8e 32       	cpi	r24, 0x2E	; 46
    1a4a:	b9 f4       	brne	.+46     	; 0x1a7a <vfprintf+0xd6>
    1a4c:	36 fc       	sbrc	r3, 6
    1a4e:	81 c1       	rjmp	.+770    	; 0x1d52 <vfprintf+0x3ae>
    1a50:	23 2d       	mov	r18, r3
    1a52:	20 64       	ori	r18, 0x40	; 64
    1a54:	32 2e       	mov	r3, r18
    1a56:	19 c0       	rjmp	.+50     	; 0x1a8a <vfprintf+0xe6>
    1a58:	36 fe       	sbrs	r3, 6
    1a5a:	06 c0       	rjmp	.+12     	; 0x1a68 <vfprintf+0xc4>
    1a5c:	8a e0       	ldi	r24, 0x0A	; 10
    1a5e:	98 9e       	mul	r9, r24
    1a60:	20 0d       	add	r18, r0
    1a62:	11 24       	eor	r1, r1
    1a64:	92 2e       	mov	r9, r18
    1a66:	11 c0       	rjmp	.+34     	; 0x1a8a <vfprintf+0xe6>
    1a68:	ea e0       	ldi	r30, 0x0A	; 10
    1a6a:	2e 9e       	mul	r2, r30
    1a6c:	20 0d       	add	r18, r0
    1a6e:	11 24       	eor	r1, r1
    1a70:	22 2e       	mov	r2, r18
    1a72:	f3 2d       	mov	r31, r3
    1a74:	f0 62       	ori	r31, 0x20	; 32
    1a76:	3f 2e       	mov	r3, r31
    1a78:	08 c0       	rjmp	.+16     	; 0x1a8a <vfprintf+0xe6>
    1a7a:	8c 36       	cpi	r24, 0x6C	; 108
    1a7c:	21 f4       	brne	.+8      	; 0x1a86 <vfprintf+0xe2>
    1a7e:	83 2d       	mov	r24, r3
    1a80:	80 68       	ori	r24, 0x80	; 128
    1a82:	38 2e       	mov	r3, r24
    1a84:	02 c0       	rjmp	.+4      	; 0x1a8a <vfprintf+0xe6>
    1a86:	88 36       	cpi	r24, 0x68	; 104
    1a88:	41 f4       	brne	.+16     	; 0x1a9a <vfprintf+0xf6>
    1a8a:	f7 01       	movw	r30, r14
    1a8c:	93 fd       	sbrc	r25, 3
    1a8e:	85 91       	lpm	r24, Z+
    1a90:	93 ff       	sbrs	r25, 3
    1a92:	81 91       	ld	r24, Z+
    1a94:	7f 01       	movw	r14, r30
    1a96:	81 11       	cpse	r24, r1
    1a98:	b3 cf       	rjmp	.-154    	; 0x1a00 <vfprintf+0x5c>
    1a9a:	98 2f       	mov	r25, r24
    1a9c:	9f 7d       	andi	r25, 0xDF	; 223
    1a9e:	95 54       	subi	r25, 0x45	; 69
    1aa0:	93 30       	cpi	r25, 0x03	; 3
    1aa2:	28 f4       	brcc	.+10     	; 0x1aae <vfprintf+0x10a>
    1aa4:	0c 5f       	subi	r16, 0xFC	; 252
    1aa6:	1f 4f       	sbci	r17, 0xFF	; 255
    1aa8:	9f e3       	ldi	r25, 0x3F	; 63
    1aaa:	99 83       	std	Y+1, r25	; 0x01
    1aac:	0d c0       	rjmp	.+26     	; 0x1ac8 <vfprintf+0x124>
    1aae:	83 36       	cpi	r24, 0x63	; 99
    1ab0:	31 f0       	breq	.+12     	; 0x1abe <vfprintf+0x11a>
    1ab2:	83 37       	cpi	r24, 0x73	; 115
    1ab4:	71 f0       	breq	.+28     	; 0x1ad2 <vfprintf+0x12e>
    1ab6:	83 35       	cpi	r24, 0x53	; 83
    1ab8:	09 f0       	breq	.+2      	; 0x1abc <vfprintf+0x118>
    1aba:	59 c0       	rjmp	.+178    	; 0x1b6e <vfprintf+0x1ca>
    1abc:	21 c0       	rjmp	.+66     	; 0x1b00 <vfprintf+0x15c>
    1abe:	f8 01       	movw	r30, r16
    1ac0:	80 81       	ld	r24, Z
    1ac2:	89 83       	std	Y+1, r24	; 0x01
    1ac4:	0e 5f       	subi	r16, 0xFE	; 254
    1ac6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ac8:	88 24       	eor	r8, r8
    1aca:	83 94       	inc	r8
    1acc:	91 2c       	mov	r9, r1
    1ace:	53 01       	movw	r10, r6
    1ad0:	13 c0       	rjmp	.+38     	; 0x1af8 <vfprintf+0x154>
    1ad2:	28 01       	movw	r4, r16
    1ad4:	f2 e0       	ldi	r31, 0x02	; 2
    1ad6:	4f 0e       	add	r4, r31
    1ad8:	51 1c       	adc	r5, r1
    1ada:	f8 01       	movw	r30, r16
    1adc:	a0 80       	ld	r10, Z
    1ade:	b1 80       	ldd	r11, Z+1	; 0x01
    1ae0:	36 fe       	sbrs	r3, 6
    1ae2:	03 c0       	rjmp	.+6      	; 0x1aea <vfprintf+0x146>
    1ae4:	69 2d       	mov	r22, r9
    1ae6:	70 e0       	ldi	r23, 0x00	; 0
    1ae8:	02 c0       	rjmp	.+4      	; 0x1aee <vfprintf+0x14a>
    1aea:	6f ef       	ldi	r22, 0xFF	; 255
    1aec:	7f ef       	ldi	r23, 0xFF	; 255
    1aee:	c5 01       	movw	r24, r10
    1af0:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <strnlen>
    1af4:	4c 01       	movw	r8, r24
    1af6:	82 01       	movw	r16, r4
    1af8:	f3 2d       	mov	r31, r3
    1afa:	ff 77       	andi	r31, 0x7F	; 127
    1afc:	3f 2e       	mov	r3, r31
    1afe:	16 c0       	rjmp	.+44     	; 0x1b2c <vfprintf+0x188>
    1b00:	28 01       	movw	r4, r16
    1b02:	22 e0       	ldi	r18, 0x02	; 2
    1b04:	42 0e       	add	r4, r18
    1b06:	51 1c       	adc	r5, r1
    1b08:	f8 01       	movw	r30, r16
    1b0a:	a0 80       	ld	r10, Z
    1b0c:	b1 80       	ldd	r11, Z+1	; 0x01
    1b0e:	36 fe       	sbrs	r3, 6
    1b10:	03 c0       	rjmp	.+6      	; 0x1b18 <vfprintf+0x174>
    1b12:	69 2d       	mov	r22, r9
    1b14:	70 e0       	ldi	r23, 0x00	; 0
    1b16:	02 c0       	rjmp	.+4      	; 0x1b1c <vfprintf+0x178>
    1b18:	6f ef       	ldi	r22, 0xFF	; 255
    1b1a:	7f ef       	ldi	r23, 0xFF	; 255
    1b1c:	c5 01       	movw	r24, r10
    1b1e:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <strnlen_P>
    1b22:	4c 01       	movw	r8, r24
    1b24:	f3 2d       	mov	r31, r3
    1b26:	f0 68       	ori	r31, 0x80	; 128
    1b28:	3f 2e       	mov	r3, r31
    1b2a:	82 01       	movw	r16, r4
    1b2c:	33 fc       	sbrc	r3, 3
    1b2e:	1b c0       	rjmp	.+54     	; 0x1b66 <vfprintf+0x1c2>
    1b30:	82 2d       	mov	r24, r2
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	88 16       	cp	r8, r24
    1b36:	99 06       	cpc	r9, r25
    1b38:	b0 f4       	brcc	.+44     	; 0x1b66 <vfprintf+0x1c2>
    1b3a:	b6 01       	movw	r22, r12
    1b3c:	80 e2       	ldi	r24, 0x20	; 32
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <fputc>
    1b44:	2a 94       	dec	r2
    1b46:	f4 cf       	rjmp	.-24     	; 0x1b30 <vfprintf+0x18c>
    1b48:	f5 01       	movw	r30, r10
    1b4a:	37 fc       	sbrc	r3, 7
    1b4c:	85 91       	lpm	r24, Z+
    1b4e:	37 fe       	sbrs	r3, 7
    1b50:	81 91       	ld	r24, Z+
    1b52:	5f 01       	movw	r10, r30
    1b54:	b6 01       	movw	r22, r12
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <fputc>
    1b5c:	21 10       	cpse	r2, r1
    1b5e:	2a 94       	dec	r2
    1b60:	21 e0       	ldi	r18, 0x01	; 1
    1b62:	82 1a       	sub	r8, r18
    1b64:	91 08       	sbc	r9, r1
    1b66:	81 14       	cp	r8, r1
    1b68:	91 04       	cpc	r9, r1
    1b6a:	71 f7       	brne	.-36     	; 0x1b48 <vfprintf+0x1a4>
    1b6c:	e8 c0       	rjmp	.+464    	; 0x1d3e <vfprintf+0x39a>
    1b6e:	84 36       	cpi	r24, 0x64	; 100
    1b70:	11 f0       	breq	.+4      	; 0x1b76 <vfprintf+0x1d2>
    1b72:	89 36       	cpi	r24, 0x69	; 105
    1b74:	41 f5       	brne	.+80     	; 0x1bc6 <vfprintf+0x222>
    1b76:	f8 01       	movw	r30, r16
    1b78:	37 fe       	sbrs	r3, 7
    1b7a:	07 c0       	rjmp	.+14     	; 0x1b8a <vfprintf+0x1e6>
    1b7c:	60 81       	ld	r22, Z
    1b7e:	71 81       	ldd	r23, Z+1	; 0x01
    1b80:	82 81       	ldd	r24, Z+2	; 0x02
    1b82:	93 81       	ldd	r25, Z+3	; 0x03
    1b84:	0c 5f       	subi	r16, 0xFC	; 252
    1b86:	1f 4f       	sbci	r17, 0xFF	; 255
    1b88:	08 c0       	rjmp	.+16     	; 0x1b9a <vfprintf+0x1f6>
    1b8a:	60 81       	ld	r22, Z
    1b8c:	71 81       	ldd	r23, Z+1	; 0x01
    1b8e:	07 2e       	mov	r0, r23
    1b90:	00 0c       	add	r0, r0
    1b92:	88 0b       	sbc	r24, r24
    1b94:	99 0b       	sbc	r25, r25
    1b96:	0e 5f       	subi	r16, 0xFE	; 254
    1b98:	1f 4f       	sbci	r17, 0xFF	; 255
    1b9a:	f3 2d       	mov	r31, r3
    1b9c:	ff 76       	andi	r31, 0x6F	; 111
    1b9e:	3f 2e       	mov	r3, r31
    1ba0:	97 ff       	sbrs	r25, 7
    1ba2:	09 c0       	rjmp	.+18     	; 0x1bb6 <vfprintf+0x212>
    1ba4:	90 95       	com	r25
    1ba6:	80 95       	com	r24
    1ba8:	70 95       	com	r23
    1baa:	61 95       	neg	r22
    1bac:	7f 4f       	sbci	r23, 0xFF	; 255
    1bae:	8f 4f       	sbci	r24, 0xFF	; 255
    1bb0:	9f 4f       	sbci	r25, 0xFF	; 255
    1bb2:	f0 68       	ori	r31, 0x80	; 128
    1bb4:	3f 2e       	mov	r3, r31
    1bb6:	2a e0       	ldi	r18, 0x0A	; 10
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	a3 01       	movw	r20, r6
    1bbc:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <__ultoa_invert>
    1bc0:	88 2e       	mov	r8, r24
    1bc2:	86 18       	sub	r8, r6
    1bc4:	45 c0       	rjmp	.+138    	; 0x1c50 <vfprintf+0x2ac>
    1bc6:	85 37       	cpi	r24, 0x75	; 117
    1bc8:	31 f4       	brne	.+12     	; 0x1bd6 <vfprintf+0x232>
    1bca:	23 2d       	mov	r18, r3
    1bcc:	2f 7e       	andi	r18, 0xEF	; 239
    1bce:	b2 2e       	mov	r11, r18
    1bd0:	2a e0       	ldi	r18, 0x0A	; 10
    1bd2:	30 e0       	ldi	r19, 0x00	; 0
    1bd4:	25 c0       	rjmp	.+74     	; 0x1c20 <vfprintf+0x27c>
    1bd6:	93 2d       	mov	r25, r3
    1bd8:	99 7f       	andi	r25, 0xF9	; 249
    1bda:	b9 2e       	mov	r11, r25
    1bdc:	8f 36       	cpi	r24, 0x6F	; 111
    1bde:	c1 f0       	breq	.+48     	; 0x1c10 <vfprintf+0x26c>
    1be0:	18 f4       	brcc	.+6      	; 0x1be8 <vfprintf+0x244>
    1be2:	88 35       	cpi	r24, 0x58	; 88
    1be4:	79 f0       	breq	.+30     	; 0x1c04 <vfprintf+0x260>
    1be6:	b5 c0       	rjmp	.+362    	; 0x1d52 <vfprintf+0x3ae>
    1be8:	80 37       	cpi	r24, 0x70	; 112
    1bea:	19 f0       	breq	.+6      	; 0x1bf2 <vfprintf+0x24e>
    1bec:	88 37       	cpi	r24, 0x78	; 120
    1bee:	21 f0       	breq	.+8      	; 0x1bf8 <vfprintf+0x254>
    1bf0:	b0 c0       	rjmp	.+352    	; 0x1d52 <vfprintf+0x3ae>
    1bf2:	e9 2f       	mov	r30, r25
    1bf4:	e0 61       	ori	r30, 0x10	; 16
    1bf6:	be 2e       	mov	r11, r30
    1bf8:	b4 fe       	sbrs	r11, 4
    1bfa:	0d c0       	rjmp	.+26     	; 0x1c16 <vfprintf+0x272>
    1bfc:	fb 2d       	mov	r31, r11
    1bfe:	f4 60       	ori	r31, 0x04	; 4
    1c00:	bf 2e       	mov	r11, r31
    1c02:	09 c0       	rjmp	.+18     	; 0x1c16 <vfprintf+0x272>
    1c04:	34 fe       	sbrs	r3, 4
    1c06:	0a c0       	rjmp	.+20     	; 0x1c1c <vfprintf+0x278>
    1c08:	29 2f       	mov	r18, r25
    1c0a:	26 60       	ori	r18, 0x06	; 6
    1c0c:	b2 2e       	mov	r11, r18
    1c0e:	06 c0       	rjmp	.+12     	; 0x1c1c <vfprintf+0x278>
    1c10:	28 e0       	ldi	r18, 0x08	; 8
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	05 c0       	rjmp	.+10     	; 0x1c20 <vfprintf+0x27c>
    1c16:	20 e1       	ldi	r18, 0x10	; 16
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	02 c0       	rjmp	.+4      	; 0x1c20 <vfprintf+0x27c>
    1c1c:	20 e1       	ldi	r18, 0x10	; 16
    1c1e:	32 e0       	ldi	r19, 0x02	; 2
    1c20:	f8 01       	movw	r30, r16
    1c22:	b7 fe       	sbrs	r11, 7
    1c24:	07 c0       	rjmp	.+14     	; 0x1c34 <vfprintf+0x290>
    1c26:	60 81       	ld	r22, Z
    1c28:	71 81       	ldd	r23, Z+1	; 0x01
    1c2a:	82 81       	ldd	r24, Z+2	; 0x02
    1c2c:	93 81       	ldd	r25, Z+3	; 0x03
    1c2e:	0c 5f       	subi	r16, 0xFC	; 252
    1c30:	1f 4f       	sbci	r17, 0xFF	; 255
    1c32:	06 c0       	rjmp	.+12     	; 0x1c40 <vfprintf+0x29c>
    1c34:	60 81       	ld	r22, Z
    1c36:	71 81       	ldd	r23, Z+1	; 0x01
    1c38:	80 e0       	ldi	r24, 0x00	; 0
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	0e 5f       	subi	r16, 0xFE	; 254
    1c3e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c40:	a3 01       	movw	r20, r6
    1c42:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <__ultoa_invert>
    1c46:	88 2e       	mov	r8, r24
    1c48:	86 18       	sub	r8, r6
    1c4a:	fb 2d       	mov	r31, r11
    1c4c:	ff 77       	andi	r31, 0x7F	; 127
    1c4e:	3f 2e       	mov	r3, r31
    1c50:	36 fe       	sbrs	r3, 6
    1c52:	0d c0       	rjmp	.+26     	; 0x1c6e <vfprintf+0x2ca>
    1c54:	23 2d       	mov	r18, r3
    1c56:	2e 7f       	andi	r18, 0xFE	; 254
    1c58:	a2 2e       	mov	r10, r18
    1c5a:	89 14       	cp	r8, r9
    1c5c:	58 f4       	brcc	.+22     	; 0x1c74 <vfprintf+0x2d0>
    1c5e:	34 fe       	sbrs	r3, 4
    1c60:	0b c0       	rjmp	.+22     	; 0x1c78 <vfprintf+0x2d4>
    1c62:	32 fc       	sbrc	r3, 2
    1c64:	09 c0       	rjmp	.+18     	; 0x1c78 <vfprintf+0x2d4>
    1c66:	83 2d       	mov	r24, r3
    1c68:	8e 7e       	andi	r24, 0xEE	; 238
    1c6a:	a8 2e       	mov	r10, r24
    1c6c:	05 c0       	rjmp	.+10     	; 0x1c78 <vfprintf+0x2d4>
    1c6e:	b8 2c       	mov	r11, r8
    1c70:	a3 2c       	mov	r10, r3
    1c72:	03 c0       	rjmp	.+6      	; 0x1c7a <vfprintf+0x2d6>
    1c74:	b8 2c       	mov	r11, r8
    1c76:	01 c0       	rjmp	.+2      	; 0x1c7a <vfprintf+0x2d6>
    1c78:	b9 2c       	mov	r11, r9
    1c7a:	a4 fe       	sbrs	r10, 4
    1c7c:	0f c0       	rjmp	.+30     	; 0x1c9c <vfprintf+0x2f8>
    1c7e:	fe 01       	movw	r30, r28
    1c80:	e8 0d       	add	r30, r8
    1c82:	f1 1d       	adc	r31, r1
    1c84:	80 81       	ld	r24, Z
    1c86:	80 33       	cpi	r24, 0x30	; 48
    1c88:	21 f4       	brne	.+8      	; 0x1c92 <vfprintf+0x2ee>
    1c8a:	9a 2d       	mov	r25, r10
    1c8c:	99 7e       	andi	r25, 0xE9	; 233
    1c8e:	a9 2e       	mov	r10, r25
    1c90:	09 c0       	rjmp	.+18     	; 0x1ca4 <vfprintf+0x300>
    1c92:	a2 fe       	sbrs	r10, 2
    1c94:	06 c0       	rjmp	.+12     	; 0x1ca2 <vfprintf+0x2fe>
    1c96:	b3 94       	inc	r11
    1c98:	b3 94       	inc	r11
    1c9a:	04 c0       	rjmp	.+8      	; 0x1ca4 <vfprintf+0x300>
    1c9c:	8a 2d       	mov	r24, r10
    1c9e:	86 78       	andi	r24, 0x86	; 134
    1ca0:	09 f0       	breq	.+2      	; 0x1ca4 <vfprintf+0x300>
    1ca2:	b3 94       	inc	r11
    1ca4:	a3 fc       	sbrc	r10, 3
    1ca6:	11 c0       	rjmp	.+34     	; 0x1cca <vfprintf+0x326>
    1ca8:	a0 fe       	sbrs	r10, 0
    1caa:	06 c0       	rjmp	.+12     	; 0x1cb8 <vfprintf+0x314>
    1cac:	b2 14       	cp	r11, r2
    1cae:	88 f4       	brcc	.+34     	; 0x1cd2 <vfprintf+0x32e>
    1cb0:	28 0c       	add	r2, r8
    1cb2:	92 2c       	mov	r9, r2
    1cb4:	9b 18       	sub	r9, r11
    1cb6:	0e c0       	rjmp	.+28     	; 0x1cd4 <vfprintf+0x330>
    1cb8:	b2 14       	cp	r11, r2
    1cba:	60 f4       	brcc	.+24     	; 0x1cd4 <vfprintf+0x330>
    1cbc:	b6 01       	movw	r22, r12
    1cbe:	80 e2       	ldi	r24, 0x20	; 32
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <fputc>
    1cc6:	b3 94       	inc	r11
    1cc8:	f7 cf       	rjmp	.-18     	; 0x1cb8 <vfprintf+0x314>
    1cca:	b2 14       	cp	r11, r2
    1ccc:	18 f4       	brcc	.+6      	; 0x1cd4 <vfprintf+0x330>
    1cce:	2b 18       	sub	r2, r11
    1cd0:	02 c0       	rjmp	.+4      	; 0x1cd6 <vfprintf+0x332>
    1cd2:	98 2c       	mov	r9, r8
    1cd4:	21 2c       	mov	r2, r1
    1cd6:	a4 fe       	sbrs	r10, 4
    1cd8:	10 c0       	rjmp	.+32     	; 0x1cfa <vfprintf+0x356>
    1cda:	b6 01       	movw	r22, r12
    1cdc:	80 e3       	ldi	r24, 0x30	; 48
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <fputc>
    1ce4:	a2 fe       	sbrs	r10, 2
    1ce6:	17 c0       	rjmp	.+46     	; 0x1d16 <vfprintf+0x372>
    1ce8:	a1 fc       	sbrc	r10, 1
    1cea:	03 c0       	rjmp	.+6      	; 0x1cf2 <vfprintf+0x34e>
    1cec:	88 e7       	ldi	r24, 0x78	; 120
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	02 c0       	rjmp	.+4      	; 0x1cf6 <vfprintf+0x352>
    1cf2:	88 e5       	ldi	r24, 0x58	; 88
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	b6 01       	movw	r22, r12
    1cf8:	0c c0       	rjmp	.+24     	; 0x1d12 <vfprintf+0x36e>
    1cfa:	8a 2d       	mov	r24, r10
    1cfc:	86 78       	andi	r24, 0x86	; 134
    1cfe:	59 f0       	breq	.+22     	; 0x1d16 <vfprintf+0x372>
    1d00:	a1 fe       	sbrs	r10, 1
    1d02:	02 c0       	rjmp	.+4      	; 0x1d08 <vfprintf+0x364>
    1d04:	8b e2       	ldi	r24, 0x2B	; 43
    1d06:	01 c0       	rjmp	.+2      	; 0x1d0a <vfprintf+0x366>
    1d08:	80 e2       	ldi	r24, 0x20	; 32
    1d0a:	a7 fc       	sbrc	r10, 7
    1d0c:	8d e2       	ldi	r24, 0x2D	; 45
    1d0e:	b6 01       	movw	r22, r12
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <fputc>
    1d16:	89 14       	cp	r8, r9
    1d18:	38 f4       	brcc	.+14     	; 0x1d28 <vfprintf+0x384>
    1d1a:	b6 01       	movw	r22, r12
    1d1c:	80 e3       	ldi	r24, 0x30	; 48
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <fputc>
    1d24:	9a 94       	dec	r9
    1d26:	f7 cf       	rjmp	.-18     	; 0x1d16 <vfprintf+0x372>
    1d28:	8a 94       	dec	r8
    1d2a:	f3 01       	movw	r30, r6
    1d2c:	e8 0d       	add	r30, r8
    1d2e:	f1 1d       	adc	r31, r1
    1d30:	80 81       	ld	r24, Z
    1d32:	b6 01       	movw	r22, r12
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <fputc>
    1d3a:	81 10       	cpse	r8, r1
    1d3c:	f5 cf       	rjmp	.-22     	; 0x1d28 <vfprintf+0x384>
    1d3e:	22 20       	and	r2, r2
    1d40:	09 f4       	brne	.+2      	; 0x1d44 <vfprintf+0x3a0>
    1d42:	42 ce       	rjmp	.-892    	; 0x19c8 <vfprintf+0x24>
    1d44:	b6 01       	movw	r22, r12
    1d46:	80 e2       	ldi	r24, 0x20	; 32
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <fputc>
    1d4e:	2a 94       	dec	r2
    1d50:	f6 cf       	rjmp	.-20     	; 0x1d3e <vfprintf+0x39a>
    1d52:	f6 01       	movw	r30, r12
    1d54:	86 81       	ldd	r24, Z+6	; 0x06
    1d56:	97 81       	ldd	r25, Z+7	; 0x07
    1d58:	02 c0       	rjmp	.+4      	; 0x1d5e <vfprintf+0x3ba>
    1d5a:	8f ef       	ldi	r24, 0xFF	; 255
    1d5c:	9f ef       	ldi	r25, 0xFF	; 255
    1d5e:	2b 96       	adiw	r28, 0x0b	; 11
    1d60:	e2 e1       	ldi	r30, 0x12	; 18
    1d62:	0c 94 7f 0f 	jmp	0x1efe	; 0x1efe <__epilogue_restores__>

00001d66 <strnlen_P>:
    1d66:	fc 01       	movw	r30, r24
    1d68:	05 90       	lpm	r0, Z+
    1d6a:	61 50       	subi	r22, 0x01	; 1
    1d6c:	70 40       	sbci	r23, 0x00	; 0
    1d6e:	01 10       	cpse	r0, r1
    1d70:	d8 f7       	brcc	.-10     	; 0x1d68 <strnlen_P+0x2>
    1d72:	80 95       	com	r24
    1d74:	90 95       	com	r25
    1d76:	8e 0f       	add	r24, r30
    1d78:	9f 1f       	adc	r25, r31
    1d7a:	08 95       	ret

00001d7c <strnlen>:
    1d7c:	fc 01       	movw	r30, r24
    1d7e:	61 50       	subi	r22, 0x01	; 1
    1d80:	70 40       	sbci	r23, 0x00	; 0
    1d82:	01 90       	ld	r0, Z+
    1d84:	01 10       	cpse	r0, r1
    1d86:	d8 f7       	brcc	.-10     	; 0x1d7e <strnlen+0x2>
    1d88:	80 95       	com	r24
    1d8a:	90 95       	com	r25
    1d8c:	8e 0f       	add	r24, r30
    1d8e:	9f 1f       	adc	r25, r31
    1d90:	08 95       	ret

00001d92 <fputc>:
    1d92:	0f 93       	push	r16
    1d94:	1f 93       	push	r17
    1d96:	cf 93       	push	r28
    1d98:	df 93       	push	r29
    1d9a:	fb 01       	movw	r30, r22
    1d9c:	23 81       	ldd	r18, Z+3	; 0x03
    1d9e:	21 fd       	sbrc	r18, 1
    1da0:	03 c0       	rjmp	.+6      	; 0x1da8 <fputc+0x16>
    1da2:	8f ef       	ldi	r24, 0xFF	; 255
    1da4:	9f ef       	ldi	r25, 0xFF	; 255
    1da6:	2c c0       	rjmp	.+88     	; 0x1e00 <fputc+0x6e>
    1da8:	22 ff       	sbrs	r18, 2
    1daa:	16 c0       	rjmp	.+44     	; 0x1dd8 <fputc+0x46>
    1dac:	46 81       	ldd	r20, Z+6	; 0x06
    1dae:	57 81       	ldd	r21, Z+7	; 0x07
    1db0:	24 81       	ldd	r18, Z+4	; 0x04
    1db2:	35 81       	ldd	r19, Z+5	; 0x05
    1db4:	42 17       	cp	r20, r18
    1db6:	53 07       	cpc	r21, r19
    1db8:	44 f4       	brge	.+16     	; 0x1dca <fputc+0x38>
    1dba:	a0 81       	ld	r26, Z
    1dbc:	b1 81       	ldd	r27, Z+1	; 0x01
    1dbe:	9d 01       	movw	r18, r26
    1dc0:	2f 5f       	subi	r18, 0xFF	; 255
    1dc2:	3f 4f       	sbci	r19, 0xFF	; 255
    1dc4:	31 83       	std	Z+1, r19	; 0x01
    1dc6:	20 83       	st	Z, r18
    1dc8:	8c 93       	st	X, r24
    1dca:	26 81       	ldd	r18, Z+6	; 0x06
    1dcc:	37 81       	ldd	r19, Z+7	; 0x07
    1dce:	2f 5f       	subi	r18, 0xFF	; 255
    1dd0:	3f 4f       	sbci	r19, 0xFF	; 255
    1dd2:	37 83       	std	Z+7, r19	; 0x07
    1dd4:	26 83       	std	Z+6, r18	; 0x06
    1dd6:	14 c0       	rjmp	.+40     	; 0x1e00 <fputc+0x6e>
    1dd8:	8b 01       	movw	r16, r22
    1dda:	ec 01       	movw	r28, r24
    1ddc:	fb 01       	movw	r30, r22
    1dde:	00 84       	ldd	r0, Z+8	; 0x08
    1de0:	f1 85       	ldd	r31, Z+9	; 0x09
    1de2:	e0 2d       	mov	r30, r0
    1de4:	09 95       	icall
    1de6:	89 2b       	or	r24, r25
    1de8:	e1 f6       	brne	.-72     	; 0x1da2 <fputc+0x10>
    1dea:	d8 01       	movw	r26, r16
    1dec:	16 96       	adiw	r26, 0x06	; 6
    1dee:	8d 91       	ld	r24, X+
    1df0:	9c 91       	ld	r25, X
    1df2:	17 97       	sbiw	r26, 0x07	; 7
    1df4:	01 96       	adiw	r24, 0x01	; 1
    1df6:	17 96       	adiw	r26, 0x07	; 7
    1df8:	9c 93       	st	X, r25
    1dfa:	8e 93       	st	-X, r24
    1dfc:	16 97       	sbiw	r26, 0x06	; 6
    1dfe:	ce 01       	movw	r24, r28
    1e00:	df 91       	pop	r29
    1e02:	cf 91       	pop	r28
    1e04:	1f 91       	pop	r17
    1e06:	0f 91       	pop	r16
    1e08:	08 95       	ret

00001e0a <__ultoa_invert>:
    1e0a:	fa 01       	movw	r30, r20
    1e0c:	aa 27       	eor	r26, r26
    1e0e:	28 30       	cpi	r18, 0x08	; 8
    1e10:	51 f1       	breq	.+84     	; 0x1e66 <__ultoa_invert+0x5c>
    1e12:	20 31       	cpi	r18, 0x10	; 16
    1e14:	81 f1       	breq	.+96     	; 0x1e76 <__ultoa_invert+0x6c>
    1e16:	e8 94       	clt
    1e18:	6f 93       	push	r22
    1e1a:	6e 7f       	andi	r22, 0xFE	; 254
    1e1c:	6e 5f       	subi	r22, 0xFE	; 254
    1e1e:	7f 4f       	sbci	r23, 0xFF	; 255
    1e20:	8f 4f       	sbci	r24, 0xFF	; 255
    1e22:	9f 4f       	sbci	r25, 0xFF	; 255
    1e24:	af 4f       	sbci	r26, 0xFF	; 255
    1e26:	b1 e0       	ldi	r27, 0x01	; 1
    1e28:	3e d0       	rcall	.+124    	; 0x1ea6 <__ultoa_invert+0x9c>
    1e2a:	b4 e0       	ldi	r27, 0x04	; 4
    1e2c:	3c d0       	rcall	.+120    	; 0x1ea6 <__ultoa_invert+0x9c>
    1e2e:	67 0f       	add	r22, r23
    1e30:	78 1f       	adc	r23, r24
    1e32:	89 1f       	adc	r24, r25
    1e34:	9a 1f       	adc	r25, r26
    1e36:	a1 1d       	adc	r26, r1
    1e38:	68 0f       	add	r22, r24
    1e3a:	79 1f       	adc	r23, r25
    1e3c:	8a 1f       	adc	r24, r26
    1e3e:	91 1d       	adc	r25, r1
    1e40:	a1 1d       	adc	r26, r1
    1e42:	6a 0f       	add	r22, r26
    1e44:	71 1d       	adc	r23, r1
    1e46:	81 1d       	adc	r24, r1
    1e48:	91 1d       	adc	r25, r1
    1e4a:	a1 1d       	adc	r26, r1
    1e4c:	20 d0       	rcall	.+64     	; 0x1e8e <__ultoa_invert+0x84>
    1e4e:	09 f4       	brne	.+2      	; 0x1e52 <__ultoa_invert+0x48>
    1e50:	68 94       	set
    1e52:	3f 91       	pop	r19
    1e54:	2a e0       	ldi	r18, 0x0A	; 10
    1e56:	26 9f       	mul	r18, r22
    1e58:	11 24       	eor	r1, r1
    1e5a:	30 19       	sub	r19, r0
    1e5c:	30 5d       	subi	r19, 0xD0	; 208
    1e5e:	31 93       	st	Z+, r19
    1e60:	de f6       	brtc	.-74     	; 0x1e18 <__ultoa_invert+0xe>
    1e62:	cf 01       	movw	r24, r30
    1e64:	08 95       	ret
    1e66:	46 2f       	mov	r20, r22
    1e68:	47 70       	andi	r20, 0x07	; 7
    1e6a:	40 5d       	subi	r20, 0xD0	; 208
    1e6c:	41 93       	st	Z+, r20
    1e6e:	b3 e0       	ldi	r27, 0x03	; 3
    1e70:	0f d0       	rcall	.+30     	; 0x1e90 <__ultoa_invert+0x86>
    1e72:	c9 f7       	brne	.-14     	; 0x1e66 <__ultoa_invert+0x5c>
    1e74:	f6 cf       	rjmp	.-20     	; 0x1e62 <__ultoa_invert+0x58>
    1e76:	46 2f       	mov	r20, r22
    1e78:	4f 70       	andi	r20, 0x0F	; 15
    1e7a:	40 5d       	subi	r20, 0xD0	; 208
    1e7c:	4a 33       	cpi	r20, 0x3A	; 58
    1e7e:	18 f0       	brcs	.+6      	; 0x1e86 <__ultoa_invert+0x7c>
    1e80:	49 5d       	subi	r20, 0xD9	; 217
    1e82:	31 fd       	sbrc	r19, 1
    1e84:	40 52       	subi	r20, 0x20	; 32
    1e86:	41 93       	st	Z+, r20
    1e88:	02 d0       	rcall	.+4      	; 0x1e8e <__ultoa_invert+0x84>
    1e8a:	a9 f7       	brne	.-22     	; 0x1e76 <__ultoa_invert+0x6c>
    1e8c:	ea cf       	rjmp	.-44     	; 0x1e62 <__ultoa_invert+0x58>
    1e8e:	b4 e0       	ldi	r27, 0x04	; 4
    1e90:	a6 95       	lsr	r26
    1e92:	97 95       	ror	r25
    1e94:	87 95       	ror	r24
    1e96:	77 95       	ror	r23
    1e98:	67 95       	ror	r22
    1e9a:	ba 95       	dec	r27
    1e9c:	c9 f7       	brne	.-14     	; 0x1e90 <__ultoa_invert+0x86>
    1e9e:	00 97       	sbiw	r24, 0x00	; 0
    1ea0:	61 05       	cpc	r22, r1
    1ea2:	71 05       	cpc	r23, r1
    1ea4:	08 95       	ret
    1ea6:	9b 01       	movw	r18, r22
    1ea8:	ac 01       	movw	r20, r24
    1eaa:	0a 2e       	mov	r0, r26
    1eac:	06 94       	lsr	r0
    1eae:	57 95       	ror	r21
    1eb0:	47 95       	ror	r20
    1eb2:	37 95       	ror	r19
    1eb4:	27 95       	ror	r18
    1eb6:	ba 95       	dec	r27
    1eb8:	c9 f7       	brne	.-14     	; 0x1eac <__ultoa_invert+0xa2>
    1eba:	62 0f       	add	r22, r18
    1ebc:	73 1f       	adc	r23, r19
    1ebe:	84 1f       	adc	r24, r20
    1ec0:	95 1f       	adc	r25, r21
    1ec2:	a0 1d       	adc	r26, r0
    1ec4:	08 95       	ret

00001ec6 <__prologue_saves__>:
    1ec6:	2f 92       	push	r2
    1ec8:	3f 92       	push	r3
    1eca:	4f 92       	push	r4
    1ecc:	5f 92       	push	r5
    1ece:	6f 92       	push	r6
    1ed0:	7f 92       	push	r7
    1ed2:	8f 92       	push	r8
    1ed4:	9f 92       	push	r9
    1ed6:	af 92       	push	r10
    1ed8:	bf 92       	push	r11
    1eda:	cf 92       	push	r12
    1edc:	df 92       	push	r13
    1ede:	ef 92       	push	r14
    1ee0:	ff 92       	push	r15
    1ee2:	0f 93       	push	r16
    1ee4:	1f 93       	push	r17
    1ee6:	cf 93       	push	r28
    1ee8:	df 93       	push	r29
    1eea:	cd b7       	in	r28, 0x3d	; 61
    1eec:	de b7       	in	r29, 0x3e	; 62
    1eee:	ca 1b       	sub	r28, r26
    1ef0:	db 0b       	sbc	r29, r27
    1ef2:	0f b6       	in	r0, 0x3f	; 63
    1ef4:	f8 94       	cli
    1ef6:	de bf       	out	0x3e, r29	; 62
    1ef8:	0f be       	out	0x3f, r0	; 63
    1efa:	cd bf       	out	0x3d, r28	; 61
    1efc:	09 94       	ijmp

00001efe <__epilogue_restores__>:
    1efe:	2a 88       	ldd	r2, Y+18	; 0x12
    1f00:	39 88       	ldd	r3, Y+17	; 0x11
    1f02:	48 88       	ldd	r4, Y+16	; 0x10
    1f04:	5f 84       	ldd	r5, Y+15	; 0x0f
    1f06:	6e 84       	ldd	r6, Y+14	; 0x0e
    1f08:	7d 84       	ldd	r7, Y+13	; 0x0d
    1f0a:	8c 84       	ldd	r8, Y+12	; 0x0c
    1f0c:	9b 84       	ldd	r9, Y+11	; 0x0b
    1f0e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1f10:	b9 84       	ldd	r11, Y+9	; 0x09
    1f12:	c8 84       	ldd	r12, Y+8	; 0x08
    1f14:	df 80       	ldd	r13, Y+7	; 0x07
    1f16:	ee 80       	ldd	r14, Y+6	; 0x06
    1f18:	fd 80       	ldd	r15, Y+5	; 0x05
    1f1a:	0c 81       	ldd	r16, Y+4	; 0x04
    1f1c:	1b 81       	ldd	r17, Y+3	; 0x03
    1f1e:	aa 81       	ldd	r26, Y+2	; 0x02
    1f20:	b9 81       	ldd	r27, Y+1	; 0x01
    1f22:	ce 0f       	add	r28, r30
    1f24:	d1 1d       	adc	r29, r1
    1f26:	0f b6       	in	r0, 0x3f	; 63
    1f28:	f8 94       	cli
    1f2a:	de bf       	out	0x3e, r29	; 62
    1f2c:	0f be       	out	0x3f, r0	; 63
    1f2e:	cd bf       	out	0x3d, r28	; 61
    1f30:	ed 01       	movw	r28, r26
    1f32:	08 95       	ret

00001f34 <_exit>:
    1f34:	f8 94       	cli

00001f36 <__stop_program>:
    1f36:	ff cf       	rjmp	.-2      	; 0x1f36 <__stop_program>
